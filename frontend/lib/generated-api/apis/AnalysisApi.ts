/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  ChunkReevaluationRequest,
  ChunkReevaluationResponse,
  HTTPValidationError,
  StartAnalysisResponse,
} from '../models/index';
import {
  ChunkReevaluationRequestFromJSON,
  ChunkReevaluationRequestToJSON,
  ChunkReevaluationResponseFromJSON,
  ChunkReevaluationResponseToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  StartAnalysisResponseFromJSON,
  StartAnalysisResponseToJSON,
} from '../models/index';

export interface ReevaluateChunkApiReevaluateChunkPostRequest {
  chunkReevaluationRequest: ChunkReevaluationRequest;
}

export interface StartAnalysisApiStartAnalysisPostRequest {
  mainDocument: Blob;
  supportingDocuments?: Array<Blob> | null;
  useToulmin?: boolean;
  runLiteratureReview?: boolean;
  runSuggestCitations?: boolean;
  domain?: string | null;
  targetAudience?: string | null;
  targetChunkIndices?: string | null;
  documentPublicationDate?: string | null;
  agentsToRun?: string | null;
  sessionId?: string | null;
}

/**
 *
 */
export class AnalysisApi extends runtime.BaseAPI {
  /**
   * Re-evaluate a specific chunk with selected agents using unified LangGraph workflow.  Args:     request: Contains chunk index, agents to run, and original state  Returns:     Updated results for the specified chunk
   * Reevaluate Chunk
   */
  async reevaluateChunkApiReevaluateChunkPostRaw(
    requestParameters: ReevaluateChunkApiReevaluateChunkPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ChunkReevaluationResponse>> {
    if (requestParameters['chunkReevaluationRequest'] == null) {
      throw new runtime.RequiredError(
        'chunkReevaluationRequest',
        'Required parameter "chunkReevaluationRequest" was null or undefined when calling reevaluateChunkApiReevaluateChunkPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    let urlPath = `/api/reevaluate-chunk`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ChunkReevaluationRequestToJSON(requestParameters['chunkReevaluationRequest']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ChunkReevaluationResponseFromJSON(jsonValue));
  }

  /**
   * Re-evaluate a specific chunk with selected agents using unified LangGraph workflow.  Args:     request: Contains chunk index, agents to run, and original state  Returns:     Updated results for the specified chunk
   * Reevaluate Chunk
   */
  async reevaluateChunkApiReevaluateChunkPost(
    requestParameters: ReevaluateChunkApiReevaluateChunkPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ChunkReevaluationResponse> {
    const response = await this.reevaluateChunkApiReevaluateChunkPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Start claim substantiation analysis - returns workflow_run_id immediately.  This endpoint: 1. Uploads and converts documents to markdown 2. Creates a workflow run record in the database 3. Returns the workflow_run_id immediately 4. Starts the analysis workflow in the background  The client can poll /api/workflow-run/{workflow_run_id} to check progress.  Args:     background_tasks: FastAPI background tasks     main_document: The main document to analyze for claims     supporting_documents: Optional supporting documents for substantiation     config: Workflow configuration built from form fields  Returns:     workflow_run_id and session_id to track the analysis
   * Start Analysis
   */
  async startAnalysisApiStartAnalysisPostRaw(
    requestParameters: StartAnalysisApiStartAnalysisPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StartAnalysisResponse>> {
    if (requestParameters['mainDocument'] == null) {
      throw new runtime.RequiredError(
        'mainDocument',
        'Required parameter "mainDocument" was null or undefined when calling startAnalysisApiStartAnalysisPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [{ contentType: 'multipart/form-data' }];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters['mainDocument'] != null) {
      formParams.append('main_document', requestParameters['mainDocument'] as any);
    }

    if (requestParameters['supportingDocuments'] != null) {
      requestParameters['supportingDocuments'].forEach((element) => {
        formParams.append('supporting_documents', element as any);
      });
    }

    if (requestParameters['useToulmin'] != null) {
      formParams.append('use_toulmin', requestParameters['useToulmin'] as any);
    }

    if (requestParameters['runLiteratureReview'] != null) {
      formParams.append('run_literature_review', requestParameters['runLiteratureReview'] as any);
    }

    if (requestParameters['runSuggestCitations'] != null) {
      formParams.append('run_suggest_citations', requestParameters['runSuggestCitations'] as any);
    }

    if (requestParameters['domain'] != null) {
      formParams.append('domain', requestParameters['domain'] as any);
    }

    if (requestParameters['targetAudience'] != null) {
      formParams.append('target_audience', requestParameters['targetAudience'] as any);
    }

    if (requestParameters['targetChunkIndices'] != null) {
      formParams.append('target_chunk_indices', requestParameters['targetChunkIndices'] as any);
    }

    if (requestParameters['documentPublicationDate'] != null) {
      formParams.append('document_publication_date', requestParameters['documentPublicationDate'] as any);
    }

    if (requestParameters['agentsToRun'] != null) {
      formParams.append('agents_to_run', requestParameters['agentsToRun'] as any);
    }

    if (requestParameters['sessionId'] != null) {
      formParams.append('session_id', requestParameters['sessionId'] as any);
    }

    let urlPath = `/api/start-analysis`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => StartAnalysisResponseFromJSON(jsonValue));
  }

  /**
   * Start claim substantiation analysis - returns workflow_run_id immediately.  This endpoint: 1. Uploads and converts documents to markdown 2. Creates a workflow run record in the database 3. Returns the workflow_run_id immediately 4. Starts the analysis workflow in the background  The client can poll /api/workflow-run/{workflow_run_id} to check progress.  Args:     background_tasks: FastAPI background tasks     main_document: The main document to analyze for claims     supporting_documents: Optional supporting documents for substantiation     config: Workflow configuration built from form fields  Returns:     workflow_run_id and session_id to track the analysis
   * Start Analysis
   */
  async startAnalysisApiStartAnalysisPost(
    requestParameters: StartAnalysisApiStartAnalysisPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StartAnalysisResponse> {
    const response = await this.startAnalysisApiStartAnalysisPostRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
