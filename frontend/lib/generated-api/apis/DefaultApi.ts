/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { ClaimSubstantiatorState, HTTPValidationError } from '../models/index';
import {
  ClaimSubstantiatorStateFromJSON,
  ClaimSubstantiatorStateToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
} from '../models/index';

export interface RunClaimSubstantiationWorkflowApiRunClaimSubstantiationPostRequest {
  mainDocument: Blob;
  supportingDocuments?: Array<Blob> | null;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Read Health
   */
  async readHealthApiHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/health`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Read Health
   */
  async readHealthApiHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
    const response = await this.readHealthApiHealthGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Run the claim substantiation workflow on uploaded documents.  Args:     main_document: The main document to analyze for claims     supporting_documents: Optional supporting documents for substantiation  Returns:     The workflow state containing claims, citations, references, and substantiations
   * Run Claim Substantiation Workflow
   */
  async runClaimSubstantiationWorkflowApiRunClaimSubstantiationPostRaw(
    requestParameters: RunClaimSubstantiationWorkflowApiRunClaimSubstantiationPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ClaimSubstantiatorState>> {
    if (requestParameters['mainDocument'] == null) {
      throw new runtime.RequiredError(
        'mainDocument',
        'Required parameter "mainDocument" was null or undefined when calling runClaimSubstantiationWorkflowApiRunClaimSubstantiationPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [{ contentType: 'multipart/form-data' }];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters['mainDocument'] != null) {
      formParams.append('main_document', requestParameters['mainDocument'] as any);
    }

    if (requestParameters['supportingDocuments'] != null) {
      requestParameters['supportingDocuments'].forEach((element) => {
        formParams.append('supporting_documents', element as any);
      });
    }

    let urlPath = `/api/run-claim-substantiation`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ClaimSubstantiatorStateFromJSON(jsonValue));
  }

  /**
   * Run the claim substantiation workflow on uploaded documents.  Args:     main_document: The main document to analyze for claims     supporting_documents: Optional supporting documents for substantiation  Returns:     The workflow state containing claims, citations, references, and substantiations
   * Run Claim Substantiation Workflow
   */
  async runClaimSubstantiationWorkflowApiRunClaimSubstantiationPost(
    requestParameters: RunClaimSubstantiationWorkflowApiRunClaimSubstantiationPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ClaimSubstantiatorState> {
    const response = await this.runClaimSubstantiationWorkflowApiRunClaimSubstantiationPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
