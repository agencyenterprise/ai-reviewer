/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  ChunkEvalPackageRequest,
  ChunkReevaluationRequest,
  ChunkReevaluationResponse,
  ClaimSubstantiatorStateOutput,
  EvalPackageRequest,
  HTTPValidationError,
  WorkflowRun,
  WorkflowRunDetailed,
} from '../models/index';
import {
  ChunkEvalPackageRequestFromJSON,
  ChunkEvalPackageRequestToJSON,
  ChunkReevaluationRequestFromJSON,
  ChunkReevaluationRequestToJSON,
  ChunkReevaluationResponseFromJSON,
  ChunkReevaluationResponseToJSON,
  ClaimSubstantiatorStateOutputFromJSON,
  ClaimSubstantiatorStateOutputToJSON,
  EvalPackageRequestFromJSON,
  EvalPackageRequestToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  WorkflowRunFromJSON,
  WorkflowRunToJSON,
  WorkflowRunDetailedFromJSON,
  WorkflowRunDetailedToJSON,
} from '../models/index';

export interface GenerateChunkEvalPackageApiGenerateChunkEvalPackagePostRequest {
  chunkEvalPackageRequest: ChunkEvalPackageRequest;
}

export interface GenerateEvalPackageApiGenerateEvalPackagePostRequest {
  evalPackageRequest: EvalPackageRequest;
}

export interface GetWorkflowRunApiWorkflowRunWorkflowRunIdGetRequest {
  workflowRunId: string;
}

export interface ReevaluateChunkApiReevaluateChunkPostRequest {
  chunkReevaluationRequest: ChunkReevaluationRequest;
}

export interface RunClaimSubstantiationWorkflowApiRunClaimSubstantiationPostRequest {
  mainDocument: Blob;
  supportingDocuments?: Array<Blob> | null;
  useToulmin?: boolean;
  domain?: string | null;
  targetAudience?: string | null;
  targetChunkIndices?: string | null;
  agentsToRun?: string | null;
  sessionId?: string | null;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Generate eval test package for a specific chunk with selected agents. Only includes files required by the selected agents.  Args:     request: Contains analysis results, chunk index, selected agents, and metadata  Returns:     Optimized zip file containing only necessary YAML test files and data files
   * Generate Chunk Eval Package
   */
  async generateChunkEvalPackageApiGenerateChunkEvalPackagePostRaw(
    requestParameters: GenerateChunkEvalPackageApiGenerateChunkEvalPackagePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters['chunkEvalPackageRequest'] == null) {
      throw new runtime.RequiredError(
        'chunkEvalPackageRequest',
        'Required parameter "chunkEvalPackageRequest" was null or undefined when calling generateChunkEvalPackageApiGenerateChunkEvalPackagePost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    let urlPath = `/api/generate-chunk-eval-package`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ChunkEvalPackageRequestToJSON(requestParameters['chunkEvalPackageRequest']),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Generate eval test package for a specific chunk with selected agents. Only includes files required by the selected agents.  Args:     request: Contains analysis results, chunk index, selected agents, and metadata  Returns:     Optimized zip file containing only necessary YAML test files and data files
   * Generate Chunk Eval Package
   */
  async generateChunkEvalPackageApiGenerateChunkEvalPackagePost(
    requestParameters: GenerateChunkEvalPackageApiGenerateChunkEvalPackagePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.generateChunkEvalPackageApiGenerateChunkEvalPackagePostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Generate complete eval test package as downloadable zip.  Args:     request: Contains analysis results and metadata for test generation  Returns:     Zip file containing YAML test files and data files
   * Generate Eval Package
   */
  async generateEvalPackageApiGenerateEvalPackagePostRaw(
    requestParameters: GenerateEvalPackageApiGenerateEvalPackagePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters['evalPackageRequest'] == null) {
      throw new runtime.RequiredError(
        'evalPackageRequest',
        'Required parameter "evalPackageRequest" was null or undefined when calling generateEvalPackageApiGenerateEvalPackagePost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    let urlPath = `/api/generate-eval-package`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: EvalPackageRequestToJSON(requestParameters['evalPackageRequest']),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Generate complete eval test package as downloadable zip.  Args:     request: Contains analysis results and metadata for test generation  Returns:     Zip file containing YAML test files and data files
   * Generate Eval Package
   */
  async generateEvalPackageApiGenerateEvalPackagePost(
    requestParameters: GenerateEvalPackageApiGenerateEvalPackagePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.generateEvalPackageApiGenerateEvalPackagePostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get list of supported agent types for chunk re-evaluation.  Returns:     List of supported agent type strings
   * Get Supported Agents
   */
  async getSupportedAgentsApiSupportedAgentsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/supported-agents`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get list of supported agent types for chunk re-evaluation.  Returns:     List of supported agent type strings
   * Get Supported Agents
   */
  async getSupportedAgentsApiSupportedAgentsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.getSupportedAgentsApiSupportedAgentsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get Workflow Run
   */
  async getWorkflowRunApiWorkflowRunWorkflowRunIdGetRaw(
    requestParameters: GetWorkflowRunApiWorkflowRunWorkflowRunIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WorkflowRunDetailed>> {
    if (requestParameters['workflowRunId'] == null) {
      throw new runtime.RequiredError(
        'workflowRunId',
        'Required parameter "workflowRunId" was null or undefined when calling getWorkflowRunApiWorkflowRunWorkflowRunIdGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/workflow-run/{workflow_run_id}`;
    urlPath = urlPath.replace(`{${'workflow_run_id'}}`, encodeURIComponent(String(requestParameters['workflowRunId'])));

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowRunDetailedFromJSON(jsonValue));
  }

  /**
   * Get Workflow Run
   */
  async getWorkflowRunApiWorkflowRunWorkflowRunIdGet(
    requestParameters: GetWorkflowRunApiWorkflowRunWorkflowRunIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkflowRunDetailed> {
    const response = await this.getWorkflowRunApiWorkflowRunWorkflowRunIdGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * List Workflow Runs
   */
  async listWorkflowRunsApiWorkflowRunsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<WorkflowRun>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/workflow-runs`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkflowRunFromJSON));
  }

  /**
   * List Workflow Runs
   */
  async listWorkflowRunsApiWorkflowRunsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<WorkflowRun>> {
    const response = await this.listWorkflowRunsApiWorkflowRunsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Read Health
   */
  async readHealthApiHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/health`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Read Health
   */
  async readHealthApiHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
    const response = await this.readHealthApiHealthGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Re-evaluate a specific chunk with selected agents using unified LangGraph workflow.  Args:     request: Contains chunk index, agents to run, and original state  Returns:     Updated results for the specified chunk
   * Reevaluate Chunk
   */
  async reevaluateChunkApiReevaluateChunkPostRaw(
    requestParameters: ReevaluateChunkApiReevaluateChunkPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ChunkReevaluationResponse>> {
    if (requestParameters['chunkReevaluationRequest'] == null) {
      throw new runtime.RequiredError(
        'chunkReevaluationRequest',
        'Required parameter "chunkReevaluationRequest" was null or undefined when calling reevaluateChunkApiReevaluateChunkPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    let urlPath = `/api/reevaluate-chunk`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ChunkReevaluationRequestToJSON(requestParameters['chunkReevaluationRequest']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ChunkReevaluationResponseFromJSON(jsonValue));
  }

  /**
   * Re-evaluate a specific chunk with selected agents using unified LangGraph workflow.  Args:     request: Contains chunk index, agents to run, and original state  Returns:     Updated results for the specified chunk
   * Reevaluate Chunk
   */
  async reevaluateChunkApiReevaluateChunkPost(
    requestParameters: ReevaluateChunkApiReevaluateChunkPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ChunkReevaluationResponse> {
    const response = await this.reevaluateChunkApiReevaluateChunkPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Run the claim substantiation workflow on uploaded documents.  Args:     main_document: The main document to analyze for claims     supporting_documents: Optional supporting documents for substantiation     config: Workflow configuration built from form fields  Returns:     The workflow state containing claims, citations, references, and substantiations
   * Run Claim Substantiation Workflow
   */
  async runClaimSubstantiationWorkflowApiRunClaimSubstantiationPostRaw(
    requestParameters: RunClaimSubstantiationWorkflowApiRunClaimSubstantiationPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ClaimSubstantiatorStateOutput>> {
    if (requestParameters['mainDocument'] == null) {
      throw new runtime.RequiredError(
        'mainDocument',
        'Required parameter "mainDocument" was null or undefined when calling runClaimSubstantiationWorkflowApiRunClaimSubstantiationPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [{ contentType: 'multipart/form-data' }];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters['mainDocument'] != null) {
      formParams.append('main_document', requestParameters['mainDocument'] as any);
    }

    if (requestParameters['supportingDocuments'] != null) {
      requestParameters['supportingDocuments'].forEach((element) => {
        formParams.append('supporting_documents', element as any);
      });
    }

    if (requestParameters['useToulmin'] != null) {
      formParams.append('use_toulmin', requestParameters['useToulmin'] as any);
    }

    if (requestParameters['domain'] != null) {
      formParams.append('domain', requestParameters['domain'] as any);
    }

    if (requestParameters['targetAudience'] != null) {
      formParams.append('target_audience', requestParameters['targetAudience'] as any);
    }

    if (requestParameters['targetChunkIndices'] != null) {
      formParams.append('target_chunk_indices', requestParameters['targetChunkIndices'] as any);
    }

    if (requestParameters['agentsToRun'] != null) {
      formParams.append('agents_to_run', requestParameters['agentsToRun'] as any);
    }

    if (requestParameters['sessionId'] != null) {
      formParams.append('session_id', requestParameters['sessionId'] as any);
    }

    let urlPath = `/api/run-claim-substantiation`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ClaimSubstantiatorStateOutputFromJSON(jsonValue));
  }

  /**
   * Run the claim substantiation workflow on uploaded documents.  Args:     main_document: The main document to analyze for claims     supporting_documents: Optional supporting documents for substantiation     config: Workflow configuration built from form fields  Returns:     The workflow state containing claims, citations, references, and substantiations
   * Run Claim Substantiation Workflow
   */
  async runClaimSubstantiationWorkflowApiRunClaimSubstantiationPost(
    requestParameters: RunClaimSubstantiationWorkflowApiRunClaimSubstantiationPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ClaimSubstantiatorStateOutput> {
    const response = await this.runClaimSubstantiationWorkflowApiRunClaimSubstantiationPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
