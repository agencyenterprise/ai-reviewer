/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { HTTPValidationError } from '../models/index';
import { HTTPValidationErrorFromJSON, HTTPValidationErrorToJSON } from '../models/index';

export interface DownloadFileApiFilesDownloadXxhashFilenameGetRequest {
  xxhash: string;
  filename: string;
}

/**
 *
 */
export class FilesApi extends runtime.BaseAPI {
  /**
   * Download a file (forces download)
   * Download File
   */
  async downloadFileApiFilesDownloadXxhashFilenameGetRaw(
    requestParameters: DownloadFileApiFilesDownloadXxhashFilenameGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters['xxhash'] == null) {
      throw new runtime.RequiredError(
        'xxhash',
        'Required parameter "xxhash" was null or undefined when calling downloadFileApiFilesDownloadXxhashFilenameGet().',
      );
    }

    if (requestParameters['filename'] == null) {
      throw new runtime.RequiredError(
        'filename',
        'Required parameter "filename" was null or undefined when calling downloadFileApiFilesDownloadXxhashFilenameGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/files/download/{xxhash}/{filename}`;
    urlPath = urlPath.replace(`{${'xxhash'}}`, encodeURIComponent(String(requestParameters['xxhash'])));
    urlPath = urlPath.replace(`{${'filename'}}`, encodeURIComponent(String(requestParameters['filename'])));

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Download a file (forces download)
   * Download File
   */
  async downloadFileApiFilesDownloadXxhashFilenameGet(
    requestParameters: DownloadFileApiFilesDownloadXxhashFilenameGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.downloadFileApiFilesDownloadXxhashFilenameGetRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
