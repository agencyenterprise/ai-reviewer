/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { FeedbackRequest, FeedbackResponse, HTTPValidationError } from '../models/index';
import {
  FeedbackRequestFromJSON,
  FeedbackRequestToJSON,
  FeedbackResponseFromJSON,
  FeedbackResponseToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
} from '../models/index';

export interface DeleteFeedbackApiFeedbackFeedbackIdDeleteRequest {
  feedbackId: string;
}

export interface GetFeedbackApiFeedbackGetRequest {
  workflowRunId: string;
  entityPath: string;
}

export interface GetWorkflowFeedbackApiFeedbackWorkflowWorkflowRunIdGetRequest {
  workflowRunId: string;
}

export interface SubmitFeedbackApiFeedbackPostRequest {
  feedbackRequest: FeedbackRequest;
}

/**
 *
 */
export class FeedbackApi extends runtime.BaseAPI {
  /**
   * Delete feedback by ID
   * Delete Feedback
   */
  async deleteFeedbackApiFeedbackFeedbackIdDeleteRaw(
    requestParameters: DeleteFeedbackApiFeedbackFeedbackIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<{ [key: string]: any }>> {
    if (requestParameters['feedbackId'] == null) {
      throw new runtime.RequiredError(
        'feedbackId',
        'Required parameter "feedbackId" was null or undefined when calling deleteFeedbackApiFeedbackFeedbackIdDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/feedback/{feedback_id}`;
    urlPath = urlPath.replace(`{${'feedback_id'}}`, encodeURIComponent(String(requestParameters['feedbackId'])));

    const response = await this.request(
      {
        path: urlPath,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Delete feedback by ID
   * Delete Feedback
   */
  async deleteFeedbackApiFeedbackFeedbackIdDelete(
    requestParameters: DeleteFeedbackApiFeedbackFeedbackIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<{ [key: string]: any }> {
    const response = await this.deleteFeedbackApiFeedbackFeedbackIdDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get feedback for a specific entity  Example: GET /api/feedback?workflow_run_id=xxx&entity_path={\"chunk_index\":0,\"claim_index\":1}
   * Get Feedback
   */
  async getFeedbackApiFeedbackGetRaw(
    requestParameters: GetFeedbackApiFeedbackGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<FeedbackResponse>> {
    if (requestParameters['workflowRunId'] == null) {
      throw new runtime.RequiredError(
        'workflowRunId',
        'Required parameter "workflowRunId" was null or undefined when calling getFeedbackApiFeedbackGet().',
      );
    }

    if (requestParameters['entityPath'] == null) {
      throw new runtime.RequiredError(
        'entityPath',
        'Required parameter "entityPath" was null or undefined when calling getFeedbackApiFeedbackGet().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters['workflowRunId'] != null) {
      queryParameters['workflow_run_id'] = requestParameters['workflowRunId'];
    }

    if (requestParameters['entityPath'] != null) {
      queryParameters['entity_path'] = requestParameters['entityPath'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/feedback`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => FeedbackResponseFromJSON(jsonValue));
  }

  /**
   * Get feedback for a specific entity  Example: GET /api/feedback?workflow_run_id=xxx&entity_path={\"chunk_index\":0,\"claim_index\":1}
   * Get Feedback
   */
  async getFeedbackApiFeedbackGet(
    requestParameters: GetFeedbackApiFeedbackGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<FeedbackResponse> {
    const response = await this.getFeedbackApiFeedbackGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get all feedback for a workflow run
   * Get Workflow Feedback
   */
  async getWorkflowFeedbackApiFeedbackWorkflowWorkflowRunIdGetRaw(
    requestParameters: GetWorkflowFeedbackApiFeedbackWorkflowWorkflowRunIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<FeedbackResponse>>> {
    if (requestParameters['workflowRunId'] == null) {
      throw new runtime.RequiredError(
        'workflowRunId',
        'Required parameter "workflowRunId" was null or undefined when calling getWorkflowFeedbackApiFeedbackWorkflowWorkflowRunIdGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/feedback/workflow/{workflow_run_id}`;
    urlPath = urlPath.replace(`{${'workflow_run_id'}}`, encodeURIComponent(String(requestParameters['workflowRunId'])));

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FeedbackResponseFromJSON));
  }

  /**
   * Get all feedback for a workflow run
   * Get Workflow Feedback
   */
  async getWorkflowFeedbackApiFeedbackWorkflowWorkflowRunIdGet(
    requestParameters: GetWorkflowFeedbackApiFeedbackWorkflowWorkflowRunIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<FeedbackResponse>> {
    const response = await this.getWorkflowFeedbackApiFeedbackWorkflowWorkflowRunIdGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Submit or update feedback for any entity
   * Submit Feedback
   */
  async submitFeedbackApiFeedbackPostRaw(
    requestParameters: SubmitFeedbackApiFeedbackPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<FeedbackResponse>> {
    if (requestParameters['feedbackRequest'] == null) {
      throw new runtime.RequiredError(
        'feedbackRequest',
        'Required parameter "feedbackRequest" was null or undefined when calling submitFeedbackApiFeedbackPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    let urlPath = `/api/feedback`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: FeedbackRequestToJSON(requestParameters['feedbackRequest']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => FeedbackResponseFromJSON(jsonValue));
  }

  /**
   * Submit or update feedback for any entity
   * Submit Feedback
   */
  async submitFeedbackApiFeedbackPost(
    requestParameters: SubmitFeedbackApiFeedbackPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<FeedbackResponse> {
    const response = await this.submitFeedbackApiFeedbackPostRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
