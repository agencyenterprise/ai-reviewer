/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { HTTPValidationError, WorkflowRun, WorkflowRunDetailed } from '../models/index';
import {
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  WorkflowRunFromJSON,
  WorkflowRunToJSON,
  WorkflowRunDetailedFromJSON,
  WorkflowRunDetailedToJSON,
} from '../models/index';

export interface DeleteWorkflowRunEndpointApiWorkflowRunWorkflowRunIdDeleteRequest {
  workflowRunId: string;
}

export interface GetWorkflowRunApiWorkflowRunWorkflowRunIdGetRequest {
  workflowRunId: string;
}

/**
 *
 */
export class WorkflowsApi extends runtime.BaseAPI {
  /**
   * Delete a workflow run and its associated checkpoint data
   * Delete Workflow Run Endpoint
   */
  async deleteWorkflowRunEndpointApiWorkflowRunWorkflowRunIdDeleteRaw(
    requestParameters: DeleteWorkflowRunEndpointApiWorkflowRunWorkflowRunIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters['workflowRunId'] == null) {
      throw new runtime.RequiredError(
        'workflowRunId',
        'Required parameter "workflowRunId" was null or undefined when calling deleteWorkflowRunEndpointApiWorkflowRunWorkflowRunIdDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/workflow-run/{workflow_run_id}`;
    urlPath = urlPath.replace(`{${'workflow_run_id'}}`, encodeURIComponent(String(requestParameters['workflowRunId'])));

    const response = await this.request(
      {
        path: urlPath,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Delete a workflow run and its associated checkpoint data
   * Delete Workflow Run Endpoint
   */
  async deleteWorkflowRunEndpointApiWorkflowRunWorkflowRunIdDelete(
    requestParameters: DeleteWorkflowRunEndpointApiWorkflowRunWorkflowRunIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.deleteWorkflowRunEndpointApiWorkflowRunWorkflowRunIdDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get detailed workflow run information including state
   * Get Workflow Run
   */
  async getWorkflowRunApiWorkflowRunWorkflowRunIdGetRaw(
    requestParameters: GetWorkflowRunApiWorkflowRunWorkflowRunIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WorkflowRunDetailed>> {
    if (requestParameters['workflowRunId'] == null) {
      throw new runtime.RequiredError(
        'workflowRunId',
        'Required parameter "workflowRunId" was null or undefined when calling getWorkflowRunApiWorkflowRunWorkflowRunIdGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/workflow-run/{workflow_run_id}`;
    urlPath = urlPath.replace(`{${'workflow_run_id'}}`, encodeURIComponent(String(requestParameters['workflowRunId'])));

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowRunDetailedFromJSON(jsonValue));
  }

  /**
   * Get detailed workflow run information including state
   * Get Workflow Run
   */
  async getWorkflowRunApiWorkflowRunWorkflowRunIdGet(
    requestParameters: GetWorkflowRunApiWorkflowRunWorkflowRunIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkflowRunDetailed> {
    const response = await this.getWorkflowRunApiWorkflowRunWorkflowRunIdGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * List all workflow runs
   * List Workflow Runs
   */
  async listWorkflowRunsApiWorkflowRunsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<WorkflowRun>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/workflow-runs`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkflowRunFromJSON));
  }

  /**
   * List all workflow runs
   * List Workflow Runs
   */
  async listWorkflowRunsApiWorkflowRunsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<WorkflowRun>> {
    const response = await this.listWorkflowRunsApiWorkflowRunsGetRaw(initOverrides);
    return await response.value();
  }
}
