/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface ToulminClaim
 */
export interface ToulminClaim {
  /**
   * The exact excerpt from the chunk that implies the claim
   * @type {string}
   * @memberof ToulminClaim
   */
  text: string;
  /**
   * The claim made in the excerpt
   * @type {string}
   * @memberof ToulminClaim
   */
  claim: string;
  /**
   * Why the excerpt implies this claim (brief analytic rationale)
   * @type {string}
   * @memberof ToulminClaim
   */
  rationale: string;
  /**
   * Whether this claim should be substantiated with citations in academic writing. Set to False for common knowledge, basic definitions, logical deductions, or well-established facts in the domain.
   * @type {boolean}
   * @memberof ToulminClaim
   */
  needsSubstantiation: boolean;
  /**
   * Data/Grounds: evidence or facts supporting the claim, quoted or paraphrased
   * @type {Array<string>}
   * @memberof ToulminClaim
   */
  data?: Array<string>;
  /**
   * Warrants: assumptions that connect the data to the claim (may be cultural, logical, or methodological)
   * @type {Array<string>}
   * @memberof ToulminClaim
   */
  warrants?: Array<string>;
  /**
   * Whether the primary warrant is stated explicitly, implied implicitly, or none could be identified
   * @type {string}
   * @memberof ToulminClaim
   */
  warrantExpression: ToulminClaimWarrantExpressionEnum;
  /**
   * Qualifiers: words/phrases indicating the strength/scope of the claim (e.g., 'likely', 'some', 'in many cases')
   * @type {Array<string>}
   * @memberof ToulminClaim
   */
  qualifiers?: Array<string>;
  /**
   * Rebuttals: acknowledged exceptions, counter-arguments, or conditions under which the claim may not hold
   * @type {Array<string>}
   * @memberof ToulminClaim
   */
  rebuttals?: Array<string>;
  /**
   * Backing: additional support that justifies the warrant (e.g., principles, studies, or theoretical reasons)
   * @type {Array<string>}
   * @memberof ToulminClaim
   */
  backing?: Array<string>;
}

/**
 * @export
 */
export const ToulminClaimWarrantExpressionEnum = {
  Stated: 'stated',
  Implied: 'implied',
  None: 'none',
} as const;
export type ToulminClaimWarrantExpressionEnum =
  (typeof ToulminClaimWarrantExpressionEnum)[keyof typeof ToulminClaimWarrantExpressionEnum];

/**
 * Check if a given object implements the ToulminClaim interface.
 */
export function instanceOfToulminClaim(value: object): value is ToulminClaim {
  if (!('text' in value) || value['text'] === undefined) return false;
  if (!('claim' in value) || value['claim'] === undefined) return false;
  if (!('rationale' in value) || value['rationale'] === undefined) return false;
  if (!('needsSubstantiation' in value) || value['needsSubstantiation'] === undefined) return false;
  if (!('warrantExpression' in value) || value['warrantExpression'] === undefined) return false;
  return true;
}

export function ToulminClaimFromJSON(json: any): ToulminClaim {
  return ToulminClaimFromJSONTyped(json, false);
}

export function ToulminClaimFromJSONTyped(json: any, ignoreDiscriminator: boolean): ToulminClaim {
  if (json == null) {
    return json;
  }
  return {
    text: json['text'],
    claim: json['claim'],
    rationale: json['rationale'],
    needsSubstantiation: json['needs_substantiation'],
    data: json['data'] == null ? undefined : json['data'],
    warrants: json['warrants'] == null ? undefined : json['warrants'],
    warrantExpression: json['warrant_expression'],
    qualifiers: json['qualifiers'] == null ? undefined : json['qualifiers'],
    rebuttals: json['rebuttals'] == null ? undefined : json['rebuttals'],
    backing: json['backing'] == null ? undefined : json['backing'],
  };
}

export function ToulminClaimToJSON(json: any): ToulminClaim {
  return ToulminClaimToJSONTyped(json, false);
}

export function ToulminClaimToJSONTyped(value?: ToulminClaim | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    text: value['text'],
    claim: value['claim'],
    rationale: value['rationale'],
    needs_substantiation: value['needsSubstantiation'],
    data: value['data'],
    warrants: value['warrants'],
    warrant_expression: value['warrantExpression'],
    qualifiers: value['qualifiers'],
    rebuttals: value['rebuttals'],
    backing: value['backing'],
  };
}
