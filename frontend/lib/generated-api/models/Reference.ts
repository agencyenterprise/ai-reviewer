/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ConfidenceInRecommendation } from './ConfidenceInRecommendation';
import {
  ConfidenceInRecommendationFromJSON,
  ConfidenceInRecommendationFromJSONTyped,
  ConfidenceInRecommendationToJSON,
  ConfidenceInRecommendationToJSONTyped,
} from './ConfidenceInRecommendation';
import type { PublicationQuality } from './PublicationQuality';
import {
  PublicationQualityFromJSON,
  PublicationQualityFromJSONTyped,
  PublicationQualityToJSON,
  PublicationQualityToJSONTyped,
} from './PublicationQuality';
import type { LibAgentsLiteratureReviewRecommendedAction } from './LibAgentsLiteratureReviewRecommendedAction';
import {
  LibAgentsLiteratureReviewRecommendedActionFromJSON,
  LibAgentsLiteratureReviewRecommendedActionFromJSONTyped,
  LibAgentsLiteratureReviewRecommendedActionToJSON,
  LibAgentsLiteratureReviewRecommendedActionToJSONTyped,
} from './LibAgentsLiteratureReviewRecommendedAction';
import type { ReferenceType } from './ReferenceType';
import {
  ReferenceTypeFromJSON,
  ReferenceTypeFromJSONTyped,
  ReferenceTypeToJSON,
  ReferenceTypeToJSONTyped,
} from './ReferenceType';

/**
 *
 * @export
 * @interface Reference
 */
export interface Reference {
  /**
   * Canonical title for the reference exactly as it should appear in the article's bibliography
   * @type {string}
   * @memberof Reference
   */
  title: string;
  /**
   * Format classification for the reference (webpage, book, article, or other)
   * @type {ReferenceType}
   * @memberof Reference
   */
  type: ReferenceType;
  /**
   * Stable URL or DOI that lets the author retrieve the reference quickly
   * @type {string}
   * @memberof Reference
   */
  link: string;
  /**
   * Bibliography entry formatted in the article's style; reuse the existing entry when the source is already in the bibliography
   * @type {string}
   * @memberof Reference
   */
  bibliographyInfo: string;
  /**
   * A boolean value indicating whether the reference is already cited elsewhere in the document
   * @type {boolean}
   * @memberof Reference
   */
  isAlreadyCitedElsewhere: boolean;
  /**
   * The index of the existing reference that this citation refers to, if any. Indices start at 1. If the citation does not refer to an existing reference in the bibliography, this should be -1.
   * @type {number}
   * @memberof Reference
   */
  indexOfAssociatedExistingReference: number;
  /**
   * The quality of the publication that carries the suggested reference
   * @type {PublicationQuality}
   * @memberof Reference
   */
  publicationQuality: PublicationQuality;
  /**
   * Exact sentence or excerpt from the full document that should cite or discuss this reference
   * @type {string}
   * @memberof Reference
   */
  relatedExcerpt: string;
  /**
   * Exact sentence or excerpt from the reference that is why we should cite or discuss it
   * @type {string}
   * @memberof Reference
   */
  relatedExcerptFromReference: string;
  /**
   * Brief explanation of why the reference strengthens, updates, or contextualizes the focused paragraph
   * @type {string}
   * @memberof Reference
   */
  rationale: string;
  /**
   * Action to take for this reference: add_citation, replace_existing_reference, discuss_reference, no_action, or other
   * @type {LibAgentsLiteratureReviewRecommendedAction}
   * @memberof Reference
   */
  recommendedAction: LibAgentsLiteratureReviewRecommendedAction;
  /**
   * Specific guidance for applying the recommended action, including citation placement or text revisions
   * @type {string}
   * @memberof Reference
   */
  explanationForRecommendedAction: string;
  /**
   * The confidence in the recommendation
   * @type {ConfidenceInRecommendation}
   * @memberof Reference
   */
  confidenceInRecommendation: ConfidenceInRecommendation;
}

/**
 * Check if a given object implements the Reference interface.
 */
export function instanceOfReference(value: object): value is Reference {
  if (!('title' in value) || value['title'] === undefined) return false;
  if (!('type' in value) || value['type'] === undefined) return false;
  if (!('link' in value) || value['link'] === undefined) return false;
  if (!('bibliographyInfo' in value) || value['bibliographyInfo'] === undefined) return false;
  if (!('isAlreadyCitedElsewhere' in value) || value['isAlreadyCitedElsewhere'] === undefined) return false;
  if (!('indexOfAssociatedExistingReference' in value) || value['indexOfAssociatedExistingReference'] === undefined)
    return false;
  if (!('publicationQuality' in value) || value['publicationQuality'] === undefined) return false;
  if (!('relatedExcerpt' in value) || value['relatedExcerpt'] === undefined) return false;
  if (!('relatedExcerptFromReference' in value) || value['relatedExcerptFromReference'] === undefined) return false;
  if (!('rationale' in value) || value['rationale'] === undefined) return false;
  if (!('recommendedAction' in value) || value['recommendedAction'] === undefined) return false;
  if (!('explanationForRecommendedAction' in value) || value['explanationForRecommendedAction'] === undefined)
    return false;
  if (!('confidenceInRecommendation' in value) || value['confidenceInRecommendation'] === undefined) return false;
  return true;
}

export function ReferenceFromJSON(json: any): Reference {
  return ReferenceFromJSONTyped(json, false);
}

export function ReferenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Reference {
  if (json == null) {
    return json;
  }
  return {
    title: json['title'],
    type: ReferenceTypeFromJSON(json['type']),
    link: json['link'],
    bibliographyInfo: json['bibliography_info'],
    isAlreadyCitedElsewhere: json['is_already_cited_elsewhere'],
    indexOfAssociatedExistingReference: json['index_of_associated_existing_reference'],
    publicationQuality: PublicationQualityFromJSON(json['publication_quality']),
    relatedExcerpt: json['related_excerpt'],
    relatedExcerptFromReference: json['related_excerpt_from_reference'],
    rationale: json['rationale'],
    recommendedAction: LibAgentsLiteratureReviewRecommendedActionFromJSON(json['recommended_action']),
    explanationForRecommendedAction: json['explanation_for_recommended_action'],
    confidenceInRecommendation: ConfidenceInRecommendationFromJSON(json['confidence_in_recommendation']),
  };
}

export function ReferenceToJSON(json: any): Reference {
  return ReferenceToJSONTyped(json, false);
}

export function ReferenceToJSONTyped(value?: Reference | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    title: value['title'],
    type: ReferenceTypeToJSON(value['type']),
    link: value['link'],
    bibliography_info: value['bibliographyInfo'],
    is_already_cited_elsewhere: value['isAlreadyCitedElsewhere'],
    index_of_associated_existing_reference: value['indexOfAssociatedExistingReference'],
    publication_quality: PublicationQualityToJSON(value['publicationQuality']),
    related_excerpt: value['relatedExcerpt'],
    related_excerpt_from_reference: value['relatedExcerptFromReference'],
    rationale: value['rationale'],
    recommended_action: LibAgentsLiteratureReviewRecommendedActionToJSON(value['recommendedAction']),
    explanation_for_recommended_action: value['explanationForRecommendedAction'],
    confidence_in_recommendation: ConfidenceInRecommendationToJSON(value['confidenceInRecommendation']),
  };
}
