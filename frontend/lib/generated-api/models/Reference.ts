/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RecommendedAction } from './RecommendedAction';
import {
  RecommendedActionFromJSON,
  RecommendedActionFromJSONTyped,
  RecommendedActionToJSON,
  RecommendedActionToJSONTyped,
} from './RecommendedAction';
import type { ReferenceType } from './ReferenceType';
import {
  ReferenceTypeFromJSON,
  ReferenceTypeFromJSONTyped,
  ReferenceTypeToJSON,
  ReferenceTypeToJSONTyped,
} from './ReferenceType';

/**
 *
 * @export
 * @interface Reference
 */
export interface Reference {
  /**
   * Canonical title for the reference exactly as it should appear in the article's bibliography
   * @type {string}
   * @memberof Reference
   */
  title: string;
  /**
   * Format classification for the reference (webpage, book, article, or other)
   * @type {ReferenceType}
   * @memberof Reference
   */
  type: ReferenceType;
  /**
   * Stable URL or DOI that lets the author retrieve the reference quickly
   * @type {string}
   * @memberof Reference
   */
  link: string;
  /**
   * Bibliography entry formatted in the article's style; reuse the existing entry when the source is already in the bibliography
   * @type {string}
   * @memberof Reference
   */
  bibliographyInfo: string;
  /**
   * Exact sentence or excerpt from the provided material that should cite or discuss this reference
   * @type {string}
   * @memberof Reference
   */
  relatedExcerpt: string;
  /**
   * Brief explanation of why the reference strengthens, updates, or contextualizes the focused paragraph
   * @type {string}
   * @memberof Reference
   */
  rationale: string;
  /**
   * Action to take for this reference: add_citation, replace_existing_reference, discuss_reference, no_action, or other
   * @type {RecommendedAction}
   * @memberof Reference
   */
  recommendedAction: RecommendedAction;
  /**
   * Specific guidance for applying the recommended action, including citation placement or text revisions
   * @type {string}
   * @memberof Reference
   */
  explanationForRecommendedAction: string;
}

/**
 * Check if a given object implements the Reference interface.
 */
export function instanceOfReference(value: object): value is Reference {
  if (!('title' in value) || value['title'] === undefined) return false;
  if (!('type' in value) || value['type'] === undefined) return false;
  if (!('link' in value) || value['link'] === undefined) return false;
  if (!('bibliographyInfo' in value) || value['bibliographyInfo'] === undefined) return false;
  if (!('relatedExcerpt' in value) || value['relatedExcerpt'] === undefined) return false;
  if (!('rationale' in value) || value['rationale'] === undefined) return false;
  if (!('recommendedAction' in value) || value['recommendedAction'] === undefined) return false;
  if (!('explanationForRecommendedAction' in value) || value['explanationForRecommendedAction'] === undefined)
    return false;
  return true;
}

export function ReferenceFromJSON(json: any): Reference {
  return ReferenceFromJSONTyped(json, false);
}

export function ReferenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Reference {
  if (json == null) {
    return json;
  }
  return {
    title: json['title'],
    type: ReferenceTypeFromJSON(json['type']),
    link: json['link'],
    bibliographyInfo: json['bibliography_info'],
    relatedExcerpt: json['related_excerpt'],
    rationale: json['rationale'],
    recommendedAction: RecommendedActionFromJSON(json['recommended_action']),
    explanationForRecommendedAction: json['explanation_for_recommended_action'],
  };
}

export function ReferenceToJSON(json: any): Reference {
  return ReferenceToJSONTyped(json, false);
}

export function ReferenceToJSONTyped(value?: Reference | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    title: value['title'],
    type: ReferenceTypeToJSON(value['type']),
    link: value['link'],
    bibliography_info: value['bibliographyInfo'],
    related_excerpt: value['relatedExcerpt'],
    rationale: value['rationale'],
    recommended_action: RecommendedActionToJSON(value['recommendedAction']),
    explanation_for_recommended_action: value['explanationForRecommendedAction'],
  };
}
