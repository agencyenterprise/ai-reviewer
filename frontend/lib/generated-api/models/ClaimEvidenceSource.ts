/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface ClaimEvidenceSource
 */
export interface ClaimEvidenceSource {
  /**
   * A quote from the document that contains the evidence for the claim
   * @type {string}
   * @memberof ClaimEvidenceSource
   */
  quote: string;
  /**
   * The location of the quote in the document, e.g., 'page 3', 'section 2', 'figure 3', etc. Be as specific as possible
   * @type {string}
   * @memberof ClaimEvidenceSource
   */
  location: string;
  /**
   * The name of the reference file that contains the evidence for the claim, as provided in the 'list of references cited' section of the input
   * @type {string}
   * @memberof ClaimEvidenceSource
   */
  referenceFileName: string;
}

/**
 * Check if a given object implements the ClaimEvidenceSource interface.
 */
export function instanceOfClaimEvidenceSource(value: object): value is ClaimEvidenceSource {
  if (!('quote' in value) || value['quote'] === undefined) return false;
  if (!('location' in value) || value['location'] === undefined) return false;
  if (!('referenceFileName' in value) || value['referenceFileName'] === undefined) return false;
  return true;
}

export function ClaimEvidenceSourceFromJSON(json: any): ClaimEvidenceSource {
  return ClaimEvidenceSourceFromJSONTyped(json, false);
}

export function ClaimEvidenceSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClaimEvidenceSource {
  if (json == null) {
    return json;
  }
  return {
    quote: json['quote'],
    location: json['location'],
    referenceFileName: json['reference_file_name'],
  };
}

export function ClaimEvidenceSourceToJSON(json: any): ClaimEvidenceSource {
  return ClaimEvidenceSourceToJSONTyped(json, false);
}

export function ClaimEvidenceSourceToJSONTyped(
  value?: ClaimEvidenceSource | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    quote: value['quote'],
    location: value['location'],
    reference_file_name: value['referenceFileName'],
  };
}
