/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Reference } from './Reference';
import { ReferenceFromJSON, ReferenceFromJSONTyped, ReferenceToJSON, ReferenceToJSONTyped } from './Reference';

/**
 *
 * @export
 * @interface CitationSuggestionResultWithClaimIndexOutput
 */
export interface CitationSuggestionResultWithClaimIndexOutput {
  /**
   * Ordered list of the most relevant references the author should consider when revising the paragraph
   * @type {Array<Reference>}
   * @memberof CitationSuggestionResultWithClaimIndexOutput
   */
  relevantReferences: Array<Reference>;
  /**
   * High-level reasoning summarizing how the recommendations improve the paragraph's literature coverage
   * @type {string}
   * @memberof CitationSuggestionResultWithClaimIndexOutput
   */
  rationale: string;
  /**
   *
   * @type {number}
   * @memberof CitationSuggestionResultWithClaimIndexOutput
   */
  chunkIndex: number;
  /**
   *
   * @type {number}
   * @memberof CitationSuggestionResultWithClaimIndexOutput
   */
  claimIndex: number;
}

/**
 * Check if a given object implements the CitationSuggestionResultWithClaimIndexOutput interface.
 */
export function instanceOfCitationSuggestionResultWithClaimIndexOutput(
  value: object,
): value is CitationSuggestionResultWithClaimIndexOutput {
  if (!('relevantReferences' in value) || value['relevantReferences'] === undefined) return false;
  if (!('rationale' in value) || value['rationale'] === undefined) return false;
  if (!('chunkIndex' in value) || value['chunkIndex'] === undefined) return false;
  if (!('claimIndex' in value) || value['claimIndex'] === undefined) return false;
  return true;
}

export function CitationSuggestionResultWithClaimIndexOutputFromJSON(
  json: any,
): CitationSuggestionResultWithClaimIndexOutput {
  return CitationSuggestionResultWithClaimIndexOutputFromJSONTyped(json, false);
}

export function CitationSuggestionResultWithClaimIndexOutputFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): CitationSuggestionResultWithClaimIndexOutput {
  if (json == null) {
    return json;
  }
  return {
    relevantReferences:
      json['relevant_references'] == null ? [] : (json['relevant_references'] as Array<any>).map(ReferenceFromJSON),
    rationale: json['rationale'],
    chunkIndex: json['chunk_index'],
    claimIndex: json['claim_index'],
  };
}

export function CitationSuggestionResultWithClaimIndexOutputToJSON(
  json: any,
): CitationSuggestionResultWithClaimIndexOutput {
  return CitationSuggestionResultWithClaimIndexOutputToJSONTyped(json, false);
}

export function CitationSuggestionResultWithClaimIndexOutputToJSONTyped(
  value?: CitationSuggestionResultWithClaimIndexOutput | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    relevant_references: (value['relevantReferences'] as Array<any>).map(ReferenceToJSON),
    rationale: value['rationale'],
    chunk_index: value['chunkIndex'],
    claim_index: value['claimIndex'],
  };
}
