/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QualityLevel } from './QualityLevel';
import {
  QualityLevelFromJSON,
  QualityLevelFromJSONTyped,
  QualityLevelToJSON,
  QualityLevelToJSONTyped,
} from './QualityLevel';
import type { ClaimReferenceFactors } from './ClaimReferenceFactors';
import {
  ClaimReferenceFactorsFromJSON,
  ClaimReferenceFactorsFromJSONTyped,
  ClaimReferenceFactorsToJSON,
  ClaimReferenceFactorsToJSONTyped,
} from './ClaimReferenceFactors';
import type { ReferenceAlignmentLevel } from './ReferenceAlignmentLevel';
import {
  ReferenceAlignmentLevelFromJSON,
  ReferenceAlignmentLevelFromJSONTyped,
  ReferenceAlignmentLevelToJSON,
  ReferenceAlignmentLevelToJSONTyped,
} from './ReferenceAlignmentLevel';
import type { EvidenceWeighterRecommendedAction } from './EvidenceWeighterRecommendedAction';
import {
  EvidenceWeighterRecommendedActionFromJSON,
  EvidenceWeighterRecommendedActionFromJSONTyped,
  EvidenceWeighterRecommendedActionToJSON,
  EvidenceWeighterRecommendedActionToJSONTyped,
} from './EvidenceWeighterRecommendedAction';

/**
 *
 * @export
 * @interface EvidenceWeighterResponseWithClaimIndexOutput
 */
export interface EvidenceWeighterResponseWithClaimIndexOutput {
  /**
   * Newer references found from the literature review report
   * @type {Array<ClaimReferenceFactors>}
   * @memberof EvidenceWeighterResponseWithClaimIndexOutput
   */
  newerReferences: Array<ClaimReferenceFactors>;
  /**
   * Evidence alignment of the newer references: unverifiable, supported, partially_supported, or unsupported
   * @type {ReferenceAlignmentLevel}
   * @memberof EvidenceWeighterResponseWithClaimIndexOutput
   */
  newerReferencesAlignment: ReferenceAlignmentLevel;
  /**
   * Recommended action for the claim: update_claim, add_citation, or no_change
   * @type {EvidenceWeighterRecommendedAction}
   * @memberof EvidenceWeighterResponseWithClaimIndexOutput
   */
  claimUpdateAction: EvidenceWeighterRecommendedAction;
  /**
   * Explanation of the rationale for the claim update action in a maximum of TWO sentences.
   * @type {string}
   * @memberof EvidenceWeighterResponseWithClaimIndexOutput
   */
  rationale: string;
  /**
   * Confidence level in the claim update: high, medium, or low
   * @type {QualityLevel}
   * @memberof EvidenceWeighterResponseWithClaimIndexOutput
   */
  confidenceLevel: QualityLevel;
  /**
   * The rewritten claim that is more clear and accurate according to the recommended action and taking the newer sources into account.
   * @type {string}
   * @memberof EvidenceWeighterResponseWithClaimIndexOutput
   */
  rewrittenClaim: string;
  /**
   *
   * @type {number}
   * @memberof EvidenceWeighterResponseWithClaimIndexOutput
   */
  chunkIndex: number;
  /**
   *
   * @type {number}
   * @memberof EvidenceWeighterResponseWithClaimIndexOutput
   */
  claimIndex: number;
}

/**
 * Check if a given object implements the EvidenceWeighterResponseWithClaimIndexOutput interface.
 */
export function instanceOfEvidenceWeighterResponseWithClaimIndexOutput(
  value: object,
): value is EvidenceWeighterResponseWithClaimIndexOutput {
  if (!('newerReferences' in value) || value['newerReferences'] === undefined) return false;
  if (!('newerReferencesAlignment' in value) || value['newerReferencesAlignment'] === undefined) return false;
  if (!('claimUpdateAction' in value) || value['claimUpdateAction'] === undefined) return false;
  if (!('rationale' in value) || value['rationale'] === undefined) return false;
  if (!('confidenceLevel' in value) || value['confidenceLevel'] === undefined) return false;
  if (!('rewrittenClaim' in value) || value['rewrittenClaim'] === undefined) return false;
  if (!('chunkIndex' in value) || value['chunkIndex'] === undefined) return false;
  if (!('claimIndex' in value) || value['claimIndex'] === undefined) return false;
  return true;
}

export function EvidenceWeighterResponseWithClaimIndexOutputFromJSON(
  json: any,
): EvidenceWeighterResponseWithClaimIndexOutput {
  return EvidenceWeighterResponseWithClaimIndexOutputFromJSONTyped(json, false);
}

export function EvidenceWeighterResponseWithClaimIndexOutputFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): EvidenceWeighterResponseWithClaimIndexOutput {
  if (json == null) {
    return json;
  }
  return {
    newerReferences: (json['newer_references'] as Array<any>).map(ClaimReferenceFactorsFromJSON),
    newerReferencesAlignment: ReferenceAlignmentLevelFromJSON(json['newer_references_alignment']),
    claimUpdateAction: EvidenceWeighterRecommendedActionFromJSON(json['claim_update_action']),
    rationale: json['rationale'],
    confidenceLevel: QualityLevelFromJSON(json['confidence_level']),
    rewrittenClaim: json['rewritten_claim'],
    chunkIndex: json['chunk_index'],
    claimIndex: json['claim_index'],
  };
}

export function EvidenceWeighterResponseWithClaimIndexOutputToJSON(
  json: any,
): EvidenceWeighterResponseWithClaimIndexOutput {
  return EvidenceWeighterResponseWithClaimIndexOutputToJSONTyped(json, false);
}

export function EvidenceWeighterResponseWithClaimIndexOutputToJSONTyped(
  value?: EvidenceWeighterResponseWithClaimIndexOutput | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    newer_references: (value['newerReferences'] as Array<any>).map(ClaimReferenceFactorsToJSON),
    newer_references_alignment: ReferenceAlignmentLevelToJSON(value['newerReferencesAlignment']),
    claim_update_action: EvidenceWeighterRecommendedActionToJSON(value['claimUpdateAction']),
    rationale: value['rationale'],
    confidence_level: QualityLevelToJSON(value['confidenceLevel']),
    rewritten_claim: value['rewrittenClaim'],
    chunk_index: value['chunkIndex'],
    claim_index: value['claimIndex'],
  };
}
