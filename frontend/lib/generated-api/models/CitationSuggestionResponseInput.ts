/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Reference } from './Reference';
import { ReferenceFromJSON, ReferenceFromJSONTyped, ReferenceToJSON, ReferenceToJSONTyped } from './Reference';

/**
 *
 * @export
 * @interface CitationSuggestionResponseInput
 */
export interface CitationSuggestionResponseInput {
  /**
   * Ordered list of the most relevant references the author should consider when revising the paragraph
   * @type {Array<Reference>}
   * @memberof CitationSuggestionResponseInput
   */
  relevantReferences: Array<Reference>;
  /**
   * High-level reasoning summarizing how the recommendations improve the paragraph's literature coverage
   * @type {string}
   * @memberof CitationSuggestionResponseInput
   */
  rationale: string;
}

/**
 * Check if a given object implements the CitationSuggestionResponseInput interface.
 */
export function instanceOfCitationSuggestionResponseInput(value: object): value is CitationSuggestionResponseInput {
  if (!('relevantReferences' in value) || value['relevantReferences'] === undefined) return false;
  if (!('rationale' in value) || value['rationale'] === undefined) return false;
  return true;
}

export function CitationSuggestionResponseInputFromJSON(json: any): CitationSuggestionResponseInput {
  return CitationSuggestionResponseInputFromJSONTyped(json, false);
}

export function CitationSuggestionResponseInputFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): CitationSuggestionResponseInput {
  if (json == null) {
    return json;
  }
  return {
    relevantReferences: (json['relevant_references'] as Array<any>).map(ReferenceFromJSON),
    rationale: json['rationale'],
  };
}

export function CitationSuggestionResponseInputToJSON(json: any): CitationSuggestionResponseInput {
  return CitationSuggestionResponseInputToJSONTyped(json, false);
}

export function CitationSuggestionResponseInputToJSONTyped(
  value?: CitationSuggestionResponseInput | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    relevant_references: (value['relevantReferences'] as Array<any>).map(ReferenceToJSON),
    rationale: value['rationale'],
  };
}
