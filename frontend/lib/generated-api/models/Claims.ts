/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ToulminClaimResponse } from './ToulminClaimResponse';
import {
  ToulminClaimResponseFromJSON,
  ToulminClaimResponseFromJSONTyped,
  ToulminClaimResponseToJSON,
  ToulminClaimResponseToJSONTyped,
} from './ToulminClaimResponse';
import type { ClaimResponse } from './ClaimResponse';
import {
  ClaimResponseFromJSON,
  ClaimResponseFromJSONTyped,
  ClaimResponseToJSON,
  ClaimResponseToJSONTyped,
} from './ClaimResponse';
import type { ToulminClaim } from './ToulminClaim';
import {
  ToulminClaimFromJSON,
  ToulminClaimFromJSONTyped,
  ToulminClaimToJSON,
  ToulminClaimToJSONTyped,
} from './ToulminClaim';

/**
 *
 * @export
 * @interface Claims
 */
export interface Claims {
  /**
   * List of extracted claims with Toulmin elements when available
   * @type {Array<ToulminClaim>}
   * @memberof Claims
   */
  claims: Array<ToulminClaim>;
  /**
   * Overall rationale for the extractions and how the Toulmin elements were identified
   * @type {string}
   * @memberof Claims
   */
  rationale: string;
}

/**
 * Check if a given object implements the Claims interface.
 */
export function instanceOfClaims(value: object): value is Claims {
  if (!('claims' in value) || value['claims'] === undefined) return false;
  if (!('rationale' in value) || value['rationale'] === undefined) return false;
  return true;
}

export function ClaimsFromJSON(json: any): Claims {
  return ClaimsFromJSONTyped(json, false);
}

export function ClaimsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Claims {
  if (json == null) {
    return json;
  }
  return {
    claims: json['claims'] == null ? [] : (json['claims'] as Array<any>).map(ToulminClaimFromJSON),
    rationale: json['rationale'],
  };
}

export function ClaimsToJSON(json: any): Claims {
  return ClaimsToJSONTyped(json, false);
}

export function ClaimsToJSONTyped(value?: Claims | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    claims: (value['claims'] as Array<any>).map(ToulminClaimToJSON),
    rationale: value['rationale'],
  };
}
