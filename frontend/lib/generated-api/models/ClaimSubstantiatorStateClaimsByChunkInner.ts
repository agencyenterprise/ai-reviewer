/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ToulminClaimResponse } from './ToulminClaimResponse';
import {
  ToulminClaimResponseFromJSON,
  ToulminClaimResponseFromJSONTyped,
  ToulminClaimResponseToJSON,
  ToulminClaimResponseToJSONTyped,
} from './ToulminClaimResponse';
import type { ClaimResponse } from './ClaimResponse';
import {
  ClaimResponseFromJSON,
  ClaimResponseFromJSONTyped,
  ClaimResponseToJSON,
  ClaimResponseToJSONTyped,
} from './ClaimResponse';
import type { ToulminClaim } from './ToulminClaim';
import {
  ToulminClaimFromJSON,
  ToulminClaimFromJSONTyped,
  ToulminClaimToJSON,
  ToulminClaimToJSONTyped,
} from './ToulminClaim';

/**
 *
 * @export
 * @interface ClaimSubstantiatorStateClaimsByChunkInner
 */
export interface ClaimSubstantiatorStateClaimsByChunkInner {
  /**
   * List of extracted claims with Toulmin elements when available
   * @type {Array<ToulminClaim>}
   * @memberof ClaimSubstantiatorStateClaimsByChunkInner
   */
  claims: Array<ToulminClaim>;
  /**
   * Overall rationale for the extractions and how the Toulmin elements were identified
   * @type {string}
   * @memberof ClaimSubstantiatorStateClaimsByChunkInner
   */
  rationale: string;
}

/**
 * Check if a given object implements the ClaimSubstantiatorStateClaimsByChunkInner interface.
 */
export function instanceOfClaimSubstantiatorStateClaimsByChunkInner(
  value: object,
): value is ClaimSubstantiatorStateClaimsByChunkInner {
  if (!('claims' in value) || value['claims'] === undefined) return false;
  if (!('rationale' in value) || value['rationale'] === undefined) return false;
  return true;
}

export function ClaimSubstantiatorStateClaimsByChunkInnerFromJSON(
  json: any,
): ClaimSubstantiatorStateClaimsByChunkInner {
  return ClaimSubstantiatorStateClaimsByChunkInnerFromJSONTyped(json, false);
}

export function ClaimSubstantiatorStateClaimsByChunkInnerFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ClaimSubstantiatorStateClaimsByChunkInner {
  if (json == null) {
    return json;
  }
  return {
    claims: (json['claims'] as Array<any>).map(ToulminClaimFromJSON),
    rationale: json['rationale'],
  };
}

export function ClaimSubstantiatorStateClaimsByChunkInnerToJSON(json: any): ClaimSubstantiatorStateClaimsByChunkInner {
  return ClaimSubstantiatorStateClaimsByChunkInnerToJSONTyped(json, false);
}

export function ClaimSubstantiatorStateClaimsByChunkInnerToJSONTyped(
  value?: ClaimSubstantiatorStateClaimsByChunkInner | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    claims: (value['claims'] as Array<any>).map(ToulminClaimToJSON),
    rationale: value['rationale'],
  };
}
