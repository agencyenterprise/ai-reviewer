/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EvidenceAlignmentLevel } from './EvidenceAlignmentLevel';
import {
  EvidenceAlignmentLevelFromJSON,
  EvidenceAlignmentLevelFromJSONTyped,
  EvidenceAlignmentLevelToJSON,
  EvidenceAlignmentLevelToJSONTyped,
} from './EvidenceAlignmentLevel';

/**
 *
 * @export
 * @interface ClaimSubstantiationResultWithClaimIndex
 */
export interface ClaimSubstantiationResultWithClaimIndex {
  /**
   * The degree of evidence that the supporting document(s) provides to support the claim. Possible values: ['unverifiable', 'supported', 'partially_supported', 'unsupported', 'contradicted']
   * @type {EvidenceAlignmentLevel}
   * @memberof ClaimSubstantiationResultWithClaimIndex
   */
  evidenceAlignment: EvidenceAlignmentLevel;
  /**
   * A brief rationale for why you think the claim is substantiated or not substantiated by the cited supporting document(s)
   * @type {string}
   * @memberof ClaimSubstantiationResultWithClaimIndex
   */
  rationale: string;
  /**
   * A brief suggestion on how the issue can be resolved, e.g., by adding more supporting documents or by rephrasing the original chunk, etc. Return 'No changes needed' if there are no significant issues with the substantiation of the claim.
   * @type {string}
   * @memberof ClaimSubstantiationResultWithClaimIndex
   */
  feedback: string;
  /**
   *
   * @type {number}
   * @memberof ClaimSubstantiationResultWithClaimIndex
   */
  chunkIndex: number;
  /**
   *
   * @type {number}
   * @memberof ClaimSubstantiationResultWithClaimIndex
   */
  claimIndex: number;
}

/**
 * Check if a given object implements the ClaimSubstantiationResultWithClaimIndex interface.
 */
export function instanceOfClaimSubstantiationResultWithClaimIndex(
  value: object,
): value is ClaimSubstantiationResultWithClaimIndex {
  if (!('evidenceAlignment' in value) || value['evidenceAlignment'] === undefined) return false;
  if (!('rationale' in value) || value['rationale'] === undefined) return false;
  if (!('feedback' in value) || value['feedback'] === undefined) return false;
  if (!('chunkIndex' in value) || value['chunkIndex'] === undefined) return false;
  if (!('claimIndex' in value) || value['claimIndex'] === undefined) return false;
  return true;
}

export function ClaimSubstantiationResultWithClaimIndexFromJSON(json: any): ClaimSubstantiationResultWithClaimIndex {
  return ClaimSubstantiationResultWithClaimIndexFromJSONTyped(json, false);
}

export function ClaimSubstantiationResultWithClaimIndexFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ClaimSubstantiationResultWithClaimIndex {
  if (json == null) {
    return json;
  }
  return {
    evidenceAlignment: EvidenceAlignmentLevelFromJSON(json['evidence_alignment']),
    rationale: json['rationale'],
    feedback: json['feedback'],
    chunkIndex: json['chunk_index'],
    claimIndex: json['claim_index'],
  };
}

export function ClaimSubstantiationResultWithClaimIndexToJSON(json: any): ClaimSubstantiationResultWithClaimIndex {
  return ClaimSubstantiationResultWithClaimIndexToJSONTyped(json, false);
}

export function ClaimSubstantiationResultWithClaimIndexToJSONTyped(
  value?: ClaimSubstantiationResultWithClaimIndex | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    evidence_alignment: EvidenceAlignmentLevelToJSON(value['evidenceAlignment']),
    rationale: value['rationale'],
    feedback: value['feedback'],
    chunk_index: value['chunkIndex'],
    claim_index: value['claimIndex'],
  };
}
