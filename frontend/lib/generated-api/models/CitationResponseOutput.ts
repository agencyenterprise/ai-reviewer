/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Citation } from './Citation';
import { CitationFromJSON, CitationFromJSONTyped, CitationToJSON, CitationToJSONTyped } from './Citation';
import type { QCResult } from './QCResult';
import { QCResultFromJSON, QCResultFromJSONTyped, QCResultToJSON, QCResultToJSONTyped } from './QCResult';

/**
 *
 * @export
 * @interface CitationResponseOutput
 */
export interface CitationResponseOutput {
  /**
   * A list of citations found in the chunk of text
   * @type {Array<Citation>}
   * @memberof CitationResponseOutput
   */
  citations: Array<Citation>;
  /**
   * Very brief rationale for why you think the chunk of text includes these citations, if any
   * @type {string}
   * @memberof CitationResponseOutput
   */
  rationale: string;
  /**
   *
   * @type {QCResult}
   * @memberof CitationResponseOutput
   */
  qcResult?: QCResult | null;
}

/**
 * Check if a given object implements the CitationResponseOutput interface.
 */
export function instanceOfCitationResponseOutput(value: object): value is CitationResponseOutput {
  if (!('citations' in value) || value['citations'] === undefined) return false;
  if (!('rationale' in value) || value['rationale'] === undefined) return false;
  return true;
}

export function CitationResponseOutputFromJSON(json: any): CitationResponseOutput {
  return CitationResponseOutputFromJSONTyped(json, false);
}

export function CitationResponseOutputFromJSONTyped(json: any, ignoreDiscriminator: boolean): CitationResponseOutput {
  if (json == null) {
    return json;
  }
  return {
    citations: json['citations'] == null ? [] : (json['citations'] as Array<any>).map(CitationFromJSON),
    rationale: json['rationale'],
    qcResult: json['qc_result'] == null ? undefined : QCResultFromJSON(json['qc_result']),
  };
}

export function CitationResponseOutputToJSON(json: any): CitationResponseOutput {
  return CitationResponseOutputToJSONTyped(json, false);
}

export function CitationResponseOutputToJSONTyped(
  value?: CitationResponseOutput | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    citations: (value['citations'] as Array<any>).map(CitationToJSON),
    rationale: value['rationale'],
    qc_result: QCResultToJSON(value['qcResult']),
  };
}
