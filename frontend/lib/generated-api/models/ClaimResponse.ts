/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Claim } from './Claim';
import { ClaimFromJSON, ClaimFromJSONTyped, ClaimToJSON, ClaimToJSONTyped } from './Claim';

/**
 *
 * @export
 * @interface ClaimResponse
 */
export interface ClaimResponse {
  /**
   * A list of claims made in the chunk of text
   * @type {Array<Claim>}
   * @memberof ClaimResponse
   */
  claims: Array<Claim>;
  /**
   * Overall rationale for why you think the chunk of text implies these claims
   * @type {string}
   * @memberof ClaimResponse
   */
  rationale: string;
}

/**
 * Check if a given object implements the ClaimResponse interface.
 */
export function instanceOfClaimResponse(value: object): value is ClaimResponse {
  if (!('claims' in value) || value['claims'] === undefined) return false;
  if (!('rationale' in value) || value['rationale'] === undefined) return false;
  return true;
}

export function ClaimResponseFromJSON(json: any): ClaimResponse {
  return ClaimResponseFromJSONTyped(json, false);
}

export function ClaimResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClaimResponse {
  if (json == null) {
    return json;
  }
  return {
    claims: (json['claims'] as Array<any>).map(ClaimFromJSON),
    rationale: json['rationale'],
  };
}

export function ClaimResponseToJSON(json: any): ClaimResponse {
  return ClaimResponseToJSONTyped(json, false);
}

export function ClaimResponseToJSONTyped(value?: ClaimResponse | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    claims: (value['claims'] as Array<any>).map(ClaimToJSON),
    rationale: value['rationale'],
  };
}
