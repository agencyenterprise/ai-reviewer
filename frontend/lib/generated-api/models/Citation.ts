/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CitationType } from './CitationType';
import {
  CitationTypeFromJSON,
  CitationTypeFromJSONTyped,
  CitationTypeToJSON,
  CitationTypeToJSONTyped,
} from './CitationType';

/**
 *
 * @export
 * @interface Citation
 */
export interface Citation {
  /**
   * The text of the citation or footnote mark, e.g., [1] or (Doe, et al., 2025), a url, etc. The bibliography/footnote itself is not a citation.
   * @type {string}
   * @memberof Citation
   */
  text: string;
  /**
   * The type of the citation. This should be a value from the CitationType enum.
   * @type {CitationType}
   * @memberof Citation
   */
  type: CitationType;
  /**
   * The format of the citation or footnote mark, e.g., [number] or (Name, et al., Year), url, etc.
   * @type {string}
   * @memberof Citation
   */
  format: string;
  /**
   * A boolean value indicating whether the citation refers to a bibliography entry or footnote in the document so it expected to have an associated bibliography entry or footnote
   * @type {boolean}
   * @memberof Citation
   */
  needsBibliography: boolean;
  /**
   * If the document includes a bibliography entry related to this citation, this will be an exact copy of that bibliography entry (do not include the entry number if there is one, just the full context of the bibliography entry), otherwise it will be an empty string.
   * @type {string}
   * @memberof Citation
   */
  associatedBibliography: string;
  /**
   * The index of the bibliography entry that this citation refers to, if any. Indices start at 1. If the citation does not refer to a bibliography entry, this should be -1.
   * @type {number}
   * @memberof Citation
   */
  indexOfAssociatedBibliography: number;
  /**
   * A very brief rationale for why you think this text is a citation
   * @type {string}
   * @memberof Citation
   */
  rationale: string;
}

/**
 * Check if a given object implements the Citation interface.
 */
export function instanceOfCitation(value: object): value is Citation {
  if (!('text' in value) || value['text'] === undefined) return false;
  if (!('type' in value) || value['type'] === undefined) return false;
  if (!('format' in value) || value['format'] === undefined) return false;
  if (!('needsBibliography' in value) || value['needsBibliography'] === undefined) return false;
  if (!('associatedBibliography' in value) || value['associatedBibliography'] === undefined) return false;
  if (!('indexOfAssociatedBibliography' in value) || value['indexOfAssociatedBibliography'] === undefined) return false;
  if (!('rationale' in value) || value['rationale'] === undefined) return false;
  return true;
}

export function CitationFromJSON(json: any): Citation {
  return CitationFromJSONTyped(json, false);
}

export function CitationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Citation {
  if (json == null) {
    return json;
  }
  return {
    text: json['text'],
    type: CitationTypeFromJSON(json['type']),
    format: json['format'],
    needsBibliography: json['needs_bibliography'],
    associatedBibliography: json['associated_bibliography'],
    indexOfAssociatedBibliography: json['index_of_associated_bibliography'],
    rationale: json['rationale'],
  };
}

export function CitationToJSON(json: any): Citation {
  return CitationToJSONTyped(json, false);
}

export function CitationToJSONTyped(value?: Citation | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    text: value['text'],
    type: CitationTypeToJSON(value['type']),
    format: value['format'],
    needs_bibliography: value['needsBibliography'],
    associated_bibliography: value['associatedBibliography'],
    index_of_associated_bibliography: value['indexOfAssociatedBibliography'],
    rationale: value['rationale'],
  };
}
