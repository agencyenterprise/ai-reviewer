/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface ClaimCommonKnowledgeResultWithClaimIndex
 */
export interface ClaimCommonKnowledgeResultWithClaimIndex {
  /**
   * A boolean value indicating whether the claim needs to be substantiated.
   * @type {boolean}
   * @memberof ClaimCommonKnowledgeResultWithClaimIndex
   */
  needsSubstantiation: boolean;
  /**
   * A brief explanation for why this claim needs to or does not need to be substantiated by references/evidence
   * @type {string}
   * @memberof ClaimCommonKnowledgeResultWithClaimIndex
   */
  rationale: string;
  /**
   * Which rule(s) from the instructions most strongly guided your judgment and why
   * @type {string}
   * @memberof ClaimCommonKnowledgeResultWithClaimIndex
   */
  guidingRules?: string;
  /**
   *
   * @type {number}
   * @memberof ClaimCommonKnowledgeResultWithClaimIndex
   */
  chunkIndex: number;
  /**
   *
   * @type {number}
   * @memberof ClaimCommonKnowledgeResultWithClaimIndex
   */
  claimIndex: number;
}

/**
 * Check if a given object implements the ClaimCommonKnowledgeResultWithClaimIndex interface.
 */
export function instanceOfClaimCommonKnowledgeResultWithClaimIndex(
  value: object,
): value is ClaimCommonKnowledgeResultWithClaimIndex {
  if (!('needsSubstantiation' in value) || value['needsSubstantiation'] === undefined) return false;
  if (!('rationale' in value) || value['rationale'] === undefined) return false;
  if (!('chunkIndex' in value) || value['chunkIndex'] === undefined) return false;
  if (!('claimIndex' in value) || value['claimIndex'] === undefined) return false;
  return true;
}

export function ClaimCommonKnowledgeResultWithClaimIndexFromJSON(json: any): ClaimCommonKnowledgeResultWithClaimIndex {
  return ClaimCommonKnowledgeResultWithClaimIndexFromJSONTyped(json, false);
}

export function ClaimCommonKnowledgeResultWithClaimIndexFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ClaimCommonKnowledgeResultWithClaimIndex {
  if (json == null) {
    return json;
  }
  return {
    needsSubstantiation: json['needs_substantiation'],
    rationale: json['rationale'],
    guidingRules: json['guiding_rules'] == null ? undefined : json['guiding_rules'],
    chunkIndex: json['chunk_index'],
    claimIndex: json['claim_index'],
  };
}

export function ClaimCommonKnowledgeResultWithClaimIndexToJSON(json: any): ClaimCommonKnowledgeResultWithClaimIndex {
  return ClaimCommonKnowledgeResultWithClaimIndexToJSONTyped(json, false);
}

export function ClaimCommonKnowledgeResultWithClaimIndexToJSONTyped(
  value?: ClaimCommonKnowledgeResultWithClaimIndex | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    needs_substantiation: value['needsSubstantiation'],
    rationale: value['rationale'],
    guiding_rules: value['guidingRules'],
    chunk_index: value['chunkIndex'],
    claim_index: value['claimIndex'],
  };
}
