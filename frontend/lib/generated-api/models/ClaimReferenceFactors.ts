/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QualityLevel } from './QualityLevel';
import {
  QualityLevelFromJSON,
  QualityLevelFromJSONTyped,
  QualityLevelToJSON,
  QualityLevelToJSONTyped,
} from './QualityLevel';
import type { ReferenceDirection } from './ReferenceDirection';
import {
  ReferenceDirectionFromJSON,
  ReferenceDirectionFromJSONTyped,
  ReferenceDirectionToJSON,
  ReferenceDirectionToJSONTyped,
} from './ReferenceDirection';
import type { PoliticalBias } from './PoliticalBias';
import {
  PoliticalBiasFromJSON,
  PoliticalBiasFromJSONTyped,
  PoliticalBiasToJSON,
  PoliticalBiasToJSONTyped,
} from './PoliticalBias';
import type { ReferenceType } from './ReferenceType';
import {
  ReferenceTypeFromJSON,
  ReferenceTypeFromJSONTyped,
  ReferenceTypeToJSON,
  ReferenceTypeToJSONTyped,
} from './ReferenceType';

/**
 * A newer source that provides evidence for or against a claim
 * @export
 * @interface ClaimReferenceFactors
 */
export interface ClaimReferenceFactors {
  /**
   * Title of the source
   * @type {string}
   * @memberof ClaimReferenceFactors
   */
  title: string;
  /**
   * Authors of the source
   * @type {string}
   * @memberof ClaimReferenceFactors
   */
  authors: string;
  /**
   * Year of publication
   * @type {number}
   * @memberof ClaimReferenceFactors
   */
  publicationYear: number;
  /**
   * Bibliography entry formatted in the article's style
   * @type {string}
   * @memberof ClaimReferenceFactors
   */
  bibliographyInfo: string;
  /**
   * URL or DOI link to the source
   * @type {string}
   * @memberof ClaimReferenceFactors
   */
  link: string;
  /**
   * Relevant excerpt from the source
   * @type {string}
   * @memberof ClaimReferenceFactors
   */
  referenceExcerpt: string;
  /**
   * Publication type of the source
   * @type {ReferenceType}
   * @memberof ClaimReferenceFactors
   */
  referenceType: ReferenceType;
  /**
   * Type of source: supporting, conflicting, or contextual
   * @type {ReferenceDirection}
   * @memberof ClaimReferenceFactors
   */
  referenceDirection: ReferenceDirection;
  /**
   * Source quality level: high, medium, or low
   * @type {QualityLevel}
   * @memberof ClaimReferenceFactors
   */
  quality: QualityLevel;
  /**
   * Political bias of the evidence
   * @type {PoliticalBias}
   * @memberof ClaimReferenceFactors
   */
  politicalBias: PoliticalBias;
  /**
   * Why this source is relevant to the claim and the claim's evidence alignment and why does it have this quality level. In a maximum of THREE sentences.
   * @type {string}
   * @memberof ClaimReferenceFactors
   */
  rationale: string;
  /**
   * Notes about study methodology or data quality
   * @type {string}
   * @memberof ClaimReferenceFactors
   */
  methodology: string;
}

/**
 * Check if a given object implements the ClaimReferenceFactors interface.
 */
export function instanceOfClaimReferenceFactors(value: object): value is ClaimReferenceFactors {
  if (!('title' in value) || value['title'] === undefined) return false;
  if (!('authors' in value) || value['authors'] === undefined) return false;
  if (!('publicationYear' in value) || value['publicationYear'] === undefined) return false;
  if (!('bibliographyInfo' in value) || value['bibliographyInfo'] === undefined) return false;
  if (!('link' in value) || value['link'] === undefined) return false;
  if (!('referenceExcerpt' in value) || value['referenceExcerpt'] === undefined) return false;
  if (!('referenceType' in value) || value['referenceType'] === undefined) return false;
  if (!('referenceDirection' in value) || value['referenceDirection'] === undefined) return false;
  if (!('quality' in value) || value['quality'] === undefined) return false;
  if (!('politicalBias' in value) || value['politicalBias'] === undefined) return false;
  if (!('rationale' in value) || value['rationale'] === undefined) return false;
  if (!('methodology' in value) || value['methodology'] === undefined) return false;
  return true;
}

export function ClaimReferenceFactorsFromJSON(json: any): ClaimReferenceFactors {
  return ClaimReferenceFactorsFromJSONTyped(json, false);
}

export function ClaimReferenceFactorsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClaimReferenceFactors {
  if (json == null) {
    return json;
  }
  return {
    title: json['title'],
    authors: json['authors'],
    publicationYear: json['publication_year'],
    bibliographyInfo: json['bibliography_info'],
    link: json['link'],
    referenceExcerpt: json['reference_excerpt'],
    referenceType: ReferenceTypeFromJSON(json['reference_type']),
    referenceDirection: ReferenceDirectionFromJSON(json['reference_direction']),
    quality: QualityLevelFromJSON(json['quality']),
    politicalBias: PoliticalBiasFromJSON(json['political_bias']),
    rationale: json['rationale'],
    methodology: json['methodology'],
  };
}

export function ClaimReferenceFactorsToJSON(json: any): ClaimReferenceFactors {
  return ClaimReferenceFactorsToJSONTyped(json, false);
}

export function ClaimReferenceFactorsToJSONTyped(
  value?: ClaimReferenceFactors | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    title: value['title'],
    authors: value['authors'],
    publication_year: value['publicationYear'],
    bibliography_info: value['bibliographyInfo'],
    link: value['link'],
    reference_excerpt: value['referenceExcerpt'],
    reference_type: ReferenceTypeToJSON(value['referenceType']),
    reference_direction: ReferenceDirectionToJSON(value['referenceDirection']),
    quality: QualityLevelToJSON(value['quality']),
    political_bias: PoliticalBiasToJSON(value['politicalBias']),
    rationale: value['rationale'],
    methodology: value['methodology'],
  };
}
