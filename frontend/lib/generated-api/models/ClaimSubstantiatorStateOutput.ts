/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DocumentChunkOutput } from './DocumentChunkOutput';
import {
  DocumentChunkOutputFromJSON,
  DocumentChunkOutputFromJSONTyped,
  DocumentChunkOutputToJSON,
  DocumentChunkOutputToJSONTyped,
} from './DocumentChunkOutput';
import type { FileDocument } from './FileDocument';
import {
  FileDocumentFromJSON,
  FileDocumentFromJSONTyped,
  FileDocumentToJSON,
  FileDocumentToJSONTyped,
} from './FileDocument';
import type { BibliographyItem } from './BibliographyItem';
import {
  BibliographyItemFromJSON,
  BibliographyItemFromJSONTyped,
  BibliographyItemToJSON,
  BibliographyItemToJSONTyped,
} from './BibliographyItem';

/**
 *
 * @export
 * @interface ClaimSubstantiatorStateOutput
 */
export interface ClaimSubstantiatorStateOutput {
  /**
   *
   * @type {FileDocument}
   * @memberof ClaimSubstantiatorStateOutput
   */
  file: FileDocument;
  /**
   *
   * @type {Array<FileDocument>}
   * @memberof ClaimSubstantiatorStateOutput
   */
  supportingFiles: Array<FileDocument>;
  /**
   *
   * @type {Array<number>}
   * @memberof ClaimSubstantiatorStateOutput
   */
  targetChunkIndices?: Array<number> | null;
  /**
   *
   * @type {Array<string>}
   * @memberof ClaimSubstantiatorStateOutput
   */
  agentsToRun?: Array<string> | null;
  /**
   *
   * @type {Array<BibliographyItem>}
   * @memberof ClaimSubstantiatorStateOutput
   */
  references?: Array<BibliographyItem>;
  /**
   *
   * @type {Array<DocumentChunkOutput>}
   * @memberof ClaimSubstantiatorStateOutput
   */
  chunks?: Array<DocumentChunkOutput>;
}

/**
 * Check if a given object implements the ClaimSubstantiatorStateOutput interface.
 */
export function instanceOfClaimSubstantiatorStateOutput(value: object): value is ClaimSubstantiatorStateOutput {
  if (!('file' in value) || value['file'] === undefined) return false;
  if (!('supportingFiles' in value) || value['supportingFiles'] === undefined) return false;
  return true;
}

export function ClaimSubstantiatorStateOutputFromJSON(json: any): ClaimSubstantiatorStateOutput {
  return ClaimSubstantiatorStateOutputFromJSONTyped(json, false);
}

export function ClaimSubstantiatorStateOutputFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ClaimSubstantiatorStateOutput {
  if (json == null) {
    return json;
  }
  return {
    file: FileDocumentFromJSON(json['file']),
    supportingFiles: (json['supporting_files'] as Array<any>).map(FileDocumentFromJSON),
    targetChunkIndices: json['target_chunk_indices'] == null ? undefined : json['target_chunk_indices'],
    agentsToRun: json['agents_to_run'] == null ? undefined : json['agents_to_run'],
    references:
      json['references'] == null ? undefined : (json['references'] as Array<any>).map(BibliographyItemFromJSON),
    chunks: json['chunks'] == null ? undefined : (json['chunks'] as Array<any>).map(DocumentChunkOutputFromJSON),
  };
}

export function ClaimSubstantiatorStateOutputToJSON(json: any): ClaimSubstantiatorStateOutput {
  return ClaimSubstantiatorStateOutputToJSONTyped(json, false);
}

export function ClaimSubstantiatorStateOutputToJSONTyped(
  value?: ClaimSubstantiatorStateOutput | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    file: FileDocumentToJSON(value['file']),
    supporting_files: (value['supportingFiles'] as Array<any>).map(FileDocumentToJSON),
    target_chunk_indices: value['targetChunkIndices'],
    agents_to_run: value['agentsToRun'],
    references:
      value['references'] == null ? undefined : (value['references'] as Array<any>).map(BibliographyItemToJSON),
    chunks: value['chunks'] == null ? undefined : (value['chunks'] as Array<any>).map(DocumentChunkOutputToJSON),
  };
}
