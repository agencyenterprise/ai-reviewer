/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QualityLevel } from './QualityLevel';
import {
  QualityLevelFromJSON,
  QualityLevelFromJSONTyped,
  QualityLevelToJSON,
  QualityLevelToJSONTyped,
} from './QualityLevel';
import type { ClaimReferenceFactors } from './ClaimReferenceFactors';
import {
  ClaimReferenceFactorsFromJSON,
  ClaimReferenceFactorsFromJSONTyped,
  ClaimReferenceFactorsToJSON,
  ClaimReferenceFactorsToJSONTyped,
} from './ClaimReferenceFactors';
import type { EvidenceAlignmentLevel } from './EvidenceAlignmentLevel';
import {
  EvidenceAlignmentLevelFromJSON,
  EvidenceAlignmentLevelFromJSONTyped,
  EvidenceAlignmentLevelToJSON,
  EvidenceAlignmentLevelToJSONTyped,
} from './EvidenceAlignmentLevel';
import type { LibAgentsEvidenceWeighterRecommendedAction } from './LibAgentsEvidenceWeighterRecommendedAction';
import {
  LibAgentsEvidenceWeighterRecommendedActionFromJSON,
  LibAgentsEvidenceWeighterRecommendedActionFromJSONTyped,
  LibAgentsEvidenceWeighterRecommendedActionToJSON,
  LibAgentsEvidenceWeighterRecommendedActionToJSONTyped,
} from './LibAgentsEvidenceWeighterRecommendedAction';

/**
 *
 * @export
 * @interface EvidenceWeighterResponseWithClaimIndexInput
 */
export interface EvidenceWeighterResponseWithClaimIndexInput {
  /**
   * Newer references found from the literature review report
   * @type {Array<ClaimReferenceFactors>}
   * @memberof EvidenceWeighterResponseWithClaimIndexInput
   */
  newerReferences: Array<ClaimReferenceFactors>;
  /**
   * Evidence alignment of the newer references: unverifiable, supported, partially_supported, or unsupported
   * @type {EvidenceAlignmentLevel}
   * @memberof EvidenceWeighterResponseWithClaimIndexInput
   */
  newerReferencesAlignment: EvidenceAlignmentLevel;
  /**
   * Recommended action for the claim: update_claim, add_citation, or no_change
   * @type {LibAgentsEvidenceWeighterRecommendedAction}
   * @memberof EvidenceWeighterResponseWithClaimIndexInput
   */
  claimUpdateAction: LibAgentsEvidenceWeighterRecommendedAction;
  /**
   * Explanation of the claim update
   * @type {string}
   * @memberof EvidenceWeighterResponseWithClaimIndexInput
   */
  rationale: string;
  /**
   * Confidence level in the claim update: high, medium, or low
   * @type {QualityLevel}
   * @memberof EvidenceWeighterResponseWithClaimIndexInput
   */
  confidenceLevel: QualityLevel;
  /**
   *
   * @type {number}
   * @memberof EvidenceWeighterResponseWithClaimIndexInput
   */
  chunkIndex: number;
  /**
   *
   * @type {number}
   * @memberof EvidenceWeighterResponseWithClaimIndexInput
   */
  claimIndex: number;
}

/**
 * Check if a given object implements the EvidenceWeighterResponseWithClaimIndexInput interface.
 */
export function instanceOfEvidenceWeighterResponseWithClaimIndexInput(
  value: object,
): value is EvidenceWeighterResponseWithClaimIndexInput {
  if (!('newerReferences' in value) || value['newerReferences'] === undefined) return false;
  if (!('newerReferencesAlignment' in value) || value['newerReferencesAlignment'] === undefined) return false;
  if (!('claimUpdateAction' in value) || value['claimUpdateAction'] === undefined) return false;
  if (!('rationale' in value) || value['rationale'] === undefined) return false;
  if (!('confidenceLevel' in value) || value['confidenceLevel'] === undefined) return false;
  if (!('chunkIndex' in value) || value['chunkIndex'] === undefined) return false;
  if (!('claimIndex' in value) || value['claimIndex'] === undefined) return false;
  return true;
}

export function EvidenceWeighterResponseWithClaimIndexInputFromJSON(
  json: any,
): EvidenceWeighterResponseWithClaimIndexInput {
  return EvidenceWeighterResponseWithClaimIndexInputFromJSONTyped(json, false);
}

export function EvidenceWeighterResponseWithClaimIndexInputFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): EvidenceWeighterResponseWithClaimIndexInput {
  if (json == null) {
    return json;
  }
  return {
    newerReferences: (json['newer_references'] as Array<any>).map(ClaimReferenceFactorsFromJSON),
    newerReferencesAlignment: EvidenceAlignmentLevelFromJSON(json['newer_references_alignment']),
    claimUpdateAction: LibAgentsEvidenceWeighterRecommendedActionFromJSON(json['claim_update_action']),
    rationale: json['rationale'],
    confidenceLevel: QualityLevelFromJSON(json['confidence_level']),
    chunkIndex: json['chunk_index'],
    claimIndex: json['claim_index'],
  };
}

export function EvidenceWeighterResponseWithClaimIndexInputToJSON(
  json: any,
): EvidenceWeighterResponseWithClaimIndexInput {
  return EvidenceWeighterResponseWithClaimIndexInputToJSONTyped(json, false);
}

export function EvidenceWeighterResponseWithClaimIndexInputToJSONTyped(
  value?: EvidenceWeighterResponseWithClaimIndexInput | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    newer_references: (value['newerReferences'] as Array<any>).map(ClaimReferenceFactorsToJSON),
    newer_references_alignment: EvidenceAlignmentLevelToJSON(value['newerReferencesAlignment']),
    claim_update_action: LibAgentsEvidenceWeighterRecommendedActionToJSON(value['claimUpdateAction']),
    rationale: value['rationale'],
    confidence_level: QualityLevelToJSON(value['confidenceLevel']),
    chunk_index: value['chunkIndex'],
    claim_index: value['claimIndex'],
  };
}
