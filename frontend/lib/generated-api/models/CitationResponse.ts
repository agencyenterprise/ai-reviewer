/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Citation } from './Citation';
import { CitationFromJSON, CitationFromJSONTyped, CitationToJSON, CitationToJSONTyped } from './Citation';

/**
 *
 * @export
 * @interface CitationResponse
 */
export interface CitationResponse {
  /**
   * A list of citations found in the chunk of text
   * @type {Array<Citation>}
   * @memberof CitationResponse
   */
  citations: Array<Citation>;
  /**
   * Very brief rationale for why you think the chunk of text includes these citations, if any
   * @type {string}
   * @memberof CitationResponse
   */
  rationale: string;
}

/**
 * Check if a given object implements the CitationResponse interface.
 */
export function instanceOfCitationResponse(value: object): value is CitationResponse {
  if (!('citations' in value) || value['citations'] === undefined) return false;
  if (!('rationale' in value) || value['rationale'] === undefined) return false;
  return true;
}

export function CitationResponseFromJSON(json: any): CitationResponse {
  return CitationResponseFromJSONTyped(json, false);
}

export function CitationResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CitationResponse {
  if (json == null) {
    return json;
  }
  return {
    citations: (json['citations'] as Array<any>).map(CitationFromJSON),
    rationale: json['rationale'],
  };
}

export function CitationResponseToJSON(json: any): CitationResponse {
  return CitationResponseToJSONTyped(json, false);
}

export function CitationResponseToJSONTyped(
  value?: CitationResponse | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    citations: (value['citations'] as Array<any>).map(CitationToJSON),
    rationale: value['rationale'],
  };
}
