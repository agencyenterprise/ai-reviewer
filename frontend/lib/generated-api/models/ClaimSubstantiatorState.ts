/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DocumentChunk } from './DocumentChunk';
import {
  DocumentChunkFromJSON,
  DocumentChunkFromJSONTyped,
  DocumentChunkToJSON,
  DocumentChunkToJSONTyped,
} from './DocumentChunk';
import type { FileDocument } from './FileDocument';
import {
  FileDocumentFromJSON,
  FileDocumentFromJSONTyped,
  FileDocumentToJSON,
  FileDocumentToJSONTyped,
} from './FileDocument';
import type { BibliographyItem } from './BibliographyItem';
import {
  BibliographyItemFromJSON,
  BibliographyItemFromJSONTyped,
  BibliographyItemToJSON,
  BibliographyItemToJSONTyped,
} from './BibliographyItem';

/**
 *
 * @export
 * @interface ClaimSubstantiatorState
 */
export interface ClaimSubstantiatorState {
  /**
   *
   * @type {FileDocument}
   * @memberof ClaimSubstantiatorState
   */
  file?: FileDocument;
  /**
   *
   * @type {Array<FileDocument>}
   * @memberof ClaimSubstantiatorState
   */
  supportingFiles?: Array<FileDocument>;
  /**
   *
   * @type {Array<number>}
   * @memberof ClaimSubstantiatorState
   */
  targetChunkIndices?: Array<number> | null;
  /**
   *
   * @type {Array<string>}
   * @memberof ClaimSubstantiatorState
   */
  agentsToRun?: Array<string> | null;
  /**
   *
   * @type {Array<BibliographyItem>}
   * @memberof ClaimSubstantiatorState
   */
  references?: Array<BibliographyItem>;
  /**
   *
   * @type {Array<DocumentChunk>}
   * @memberof ClaimSubstantiatorState
   */
  chunks?: Array<DocumentChunk>;
}

/**
 * Check if a given object implements the ClaimSubstantiatorState interface.
 */
export function instanceOfClaimSubstantiatorState(value: object): value is ClaimSubstantiatorState {
  return true;
}

export function ClaimSubstantiatorStateFromJSON(json: any): ClaimSubstantiatorState {
  return ClaimSubstantiatorStateFromJSONTyped(json, false);
}

export function ClaimSubstantiatorStateFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClaimSubstantiatorState {
  if (json == null) {
    return json;
  }
  return {
    file: json['file'] == null ? undefined : FileDocumentFromJSON(json['file']),
    supportingFiles:
      json['supporting_files'] == null ? undefined : (json['supporting_files'] as Array<any>).map(FileDocumentFromJSON),
    targetChunkIndices: json['target_chunk_indices'] == null ? undefined : json['target_chunk_indices'],
    agentsToRun: json['agents_to_run'] == null ? undefined : json['agents_to_run'],
    references:
      json['references'] == null ? undefined : (json['references'] as Array<any>).map(BibliographyItemFromJSON),
    chunks: json['chunks'] == null ? undefined : (json['chunks'] as Array<any>).map(DocumentChunkFromJSON),
  };
}

export function ClaimSubstantiatorStateToJSON(json: any): ClaimSubstantiatorState {
  return ClaimSubstantiatorStateToJSONTyped(json, false);
}

export function ClaimSubstantiatorStateToJSONTyped(
  value?: ClaimSubstantiatorState | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    file: FileDocumentToJSON(value['file']),
    supporting_files:
      value['supportingFiles'] == null ? undefined : (value['supportingFiles'] as Array<any>).map(FileDocumentToJSON),
    target_chunk_indices: value['targetChunkIndices'],
    agents_to_run: value['agentsToRun'],
    references:
      value['references'] == null ? undefined : (value['references'] as Array<any>).map(BibliographyItemToJSON),
    chunks: value['chunks'] == null ? undefined : (value['chunks'] as Array<any>).map(DocumentChunkToJSON),
  };
}
