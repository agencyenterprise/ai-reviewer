/* tslint:disable */
/* eslint-disable */
/**
 * AI Analyst API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QualityLevel } from './QualityLevel';
import {
  QualityLevelFromJSON,
  QualityLevelFromJSONTyped,
  QualityLevelToJSON,
  QualityLevelToJSONTyped,
} from './QualityLevel';
import type { ReferenceDirection } from './ReferenceDirection';
import {
  ReferenceDirectionFromJSON,
  ReferenceDirectionFromJSONTyped,
  ReferenceDirectionToJSON,
  ReferenceDirectionToJSONTyped,
} from './ReferenceDirection';
import type { PoliticalBias } from './PoliticalBias';
import {
  PoliticalBiasFromJSON,
  PoliticalBiasFromJSONTyped,
  PoliticalBiasToJSON,
  PoliticalBiasToJSONTyped,
} from './PoliticalBias';
import type { ReferenceType } from './ReferenceType';
import {
  ReferenceTypeFromJSON,
  ReferenceTypeFromJSONTyped,
  ReferenceTypeToJSON,
  ReferenceTypeToJSONTyped,
} from './ReferenceType';

/**
 * A reference that should be cited or discussed in the article
 * @export
 * @interface DocumentReferenceFactors
 */
export interface DocumentReferenceFactors {
  /**
   * The title of the reference
   * @type {string}
   * @memberof DocumentReferenceFactors
   */
  title: string;
  /**
   * Authors of the source
   * @type {string}
   * @memberof DocumentReferenceFactors
   */
  authors: string;
  /**
   * Year of publication
   * @type {number}
   * @memberof DocumentReferenceFactors
   */
  publicationYear: number;
  /**
   * Full bibliography citation text
   * @type {string}
   * @memberof DocumentReferenceFactors
   */
  bibliographyInfo: string;
  /**
   *
   * @type {string}
   * @memberof DocumentReferenceFactors
   */
  link?: string | null;
  /**
   * Relevant excerpt from the reference that is why we should cite or discuss it
   * @type {string}
   * @memberof DocumentReferenceFactors
   */
  referenceExcerpt: string;
  /**
   * Publication type (e.g., journal, website, book, preprint)
   * @type {ReferenceType}
   * @memberof DocumentReferenceFactors
   */
  referenceType: ReferenceType;
  /**
   * Quality of the reference
   * @type {QualityLevel}
   * @memberof DocumentReferenceFactors
   */
  quality: QualityLevel;
  /**
   * Type of source: supporting, conflicting, or contextual
   * @type {ReferenceDirection}
   * @memberof DocumentReferenceFactors
   */
  referenceDirection: ReferenceDirection;
  /**
   * Political bias of the evidence
   * @type {PoliticalBias}
   * @memberof DocumentReferenceFactors
   */
  politicalBias: PoliticalBias;
  /**
   * Why this reference should be cited
   * @type {string}
   * @memberof DocumentReferenceFactors
   */
  rationale: string;
  /**
   * Relevant excerpt from the main document that relates to this reference
   * @type {string}
   * @memberof DocumentReferenceFactors
   */
  mainDocumentExcerpt: string;
  /**
   * What action to take (add_new_citation, cite_existing_reference_in_new_place, replace_existing_reference, discuss_reference, no_action, other
   * @type {string}
   * @memberof DocumentReferenceFactors
   */
  recommendedAction: string;
  /**
   * How to implement the recommended action
   * @type {string}
   * @memberof DocumentReferenceFactors
   */
  explanationForRecommendedAction: string;
}

/**
 * Check if a given object implements the DocumentReferenceFactors interface.
 */
export function instanceOfDocumentReferenceFactors(value: object): value is DocumentReferenceFactors {
  if (!('title' in value) || value['title'] === undefined) return false;
  if (!('authors' in value) || value['authors'] === undefined) return false;
  if (!('publicationYear' in value) || value['publicationYear'] === undefined) return false;
  if (!('bibliographyInfo' in value) || value['bibliographyInfo'] === undefined) return false;
  if (!('referenceExcerpt' in value) || value['referenceExcerpt'] === undefined) return false;
  if (!('referenceType' in value) || value['referenceType'] === undefined) return false;
  if (!('quality' in value) || value['quality'] === undefined) return false;
  if (!('referenceDirection' in value) || value['referenceDirection'] === undefined) return false;
  if (!('politicalBias' in value) || value['politicalBias'] === undefined) return false;
  if (!('rationale' in value) || value['rationale'] === undefined) return false;
  if (!('mainDocumentExcerpt' in value) || value['mainDocumentExcerpt'] === undefined) return false;
  if (!('recommendedAction' in value) || value['recommendedAction'] === undefined) return false;
  if (!('explanationForRecommendedAction' in value) || value['explanationForRecommendedAction'] === undefined)
    return false;
  return true;
}

export function DocumentReferenceFactorsFromJSON(json: any): DocumentReferenceFactors {
  return DocumentReferenceFactorsFromJSONTyped(json, false);
}

export function DocumentReferenceFactorsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): DocumentReferenceFactors {
  if (json == null) {
    return json;
  }
  return {
    title: json['title'],
    authors: json['authors'],
    publicationYear: json['publication_year'],
    bibliographyInfo: json['bibliography_info'],
    link: json['link'] == null ? undefined : json['link'],
    referenceExcerpt: json['reference_excerpt'],
    referenceType: ReferenceTypeFromJSON(json['reference_type']),
    quality: QualityLevelFromJSON(json['quality']),
    referenceDirection: ReferenceDirectionFromJSON(json['reference_direction']),
    politicalBias: PoliticalBiasFromJSON(json['political_bias']),
    rationale: json['rationale'],
    mainDocumentExcerpt: json['main_document_excerpt'],
    recommendedAction: json['recommended_action'],
    explanationForRecommendedAction: json['explanation_for_recommended_action'],
  };
}

export function DocumentReferenceFactorsToJSON(json: any): DocumentReferenceFactors {
  return DocumentReferenceFactorsToJSONTyped(json, false);
}

export function DocumentReferenceFactorsToJSONTyped(
  value?: DocumentReferenceFactors | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    title: value['title'],
    authors: value['authors'],
    publication_year: value['publicationYear'],
    bibliography_info: value['bibliographyInfo'],
    link: value['link'],
    reference_excerpt: value['referenceExcerpt'],
    reference_type: ReferenceTypeToJSON(value['referenceType']),
    quality: QualityLevelToJSON(value['quality']),
    reference_direction: ReferenceDirectionToJSON(value['referenceDirection']),
    political_bias: PoliticalBiasToJSON(value['politicalBias']),
    rationale: value['rationale'],
    main_document_excerpt: value['mainDocumentExcerpt'],
    recommended_action: value['recommendedAction'],
    explanation_for_recommended_action: value['explanationForRecommendedAction'],
  };
}
